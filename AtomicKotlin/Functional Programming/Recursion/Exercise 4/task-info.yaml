type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 619
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 619
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if (current in connections) return
          connections += current

          current.connections.forEach {
            addConnectionsFrom(it)
          }
  - offset: 1217
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 1217
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val current = toBeAnalyzed.first()

          toBeAnalyzed.remove(current)

          if (current in connections) continue

          connections += current

          current.connections.forEach {
            toBeAnalyzed += it
          }
  text: |-
    // Recursion/Task4.kt
    package recursionExercise4
    import atomictest.eq

    class City(val name: String) {
      val connections = mutableListOf<City>()

      override fun toString() = "($name, " +
        "connections: ${connections.map { it.name }})"
    }

    fun addConnection(first: City, second: City) {
      first.connections += second
      second.connections += first
    }

    fun City.allReachableRecursive(): Set<City> {
      // Stores all cities reachable from the given city:
      val connections = mutableSetOf<City>()

      // Add all connections reachable
      // from 'current' city to 'connections' Set
      fun addConnectionsFrom(current: City) {
        TODO()
      }

      addConnectionsFrom(this)
      return connections
    }

    fun City.allReachableIterative(): Set<City> {
      // Stores all cities reachable from the given city
      val connections = mutableSetOf<City>()
      // Stores all cities for which direct connections are to be analyzed
      val toBeAnalyzed = mutableSetOf(this)

      // For each 'current' city from 'toBeAnalyzed' set:
      // - Unmark it (remove from 'to be analyzed' set)
      // - If it's already in 'connections', do nothing
      // - Add it to 'connections'
      // - Mark all its connections as 'to be analyzed'
      while (toBeAnalyzed.isNotEmpty()) {
        TODO()
      }
      return connections
    }

    fun main() {
      val dublin = City("Dublin")
      val liverpool = City("Liverpool")
      val manchester = City("Manchester")
      val leeds = City("Leeds")

      addConnection(liverpool, manchester)
      addConnection(manchester, leeds)

      liverpool.allReachableRecursive() eq
        setOf(liverpool, manchester, leeds)
      dublin.allReachableRecursive() eq
        setOf(dublin)

      liverpool.allReachableIterative() eq
        setOf(liverpool, manchester, leeds)
      dublin.allReachableIterative() eq
        setOf(dublin)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package recursionExercise4

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestRecursionExercise4 {
      private fun checkSample(from: City, result: Set<City>) {
        Assert.assertEquals("Wrong result for sample '${from.name}.getAllReachableRecursive()'", result,
          from.allReachableRecursive())
        Assert.assertEquals("Wrong result for sample '${from.name}.getAllReachableIterative()'", result,
          from.allReachableIterative())
      }

      private fun check(cities: List<City>, from: Int, result: Set<Int>) {
        val expectedResultSorted = result.map { cities[it] }.sortedBy { it.name }
        Assert.assertEquals("Wrong result for '${cities[from].name}.getAllReachableRecursive()' for $cities",
          expectedResultSorted,
          cities[from].allReachableRecursive().sortedBy { it.name })
        Assert.assertEquals("Wrong result for '${cities[from].name}.getAllReachableIterative()' for $cities",
          expectedResultSorted,
          cities[from].allReachableIterative().sortedBy { it.name })
      }

      private fun addConnections(cities: List<City>, vararg pairs: Pair<Int, Int>) {
        pairs.forEach {
          addConnection(cities[it.first], cities[it.second])
        }
      }

      private fun IntRange.toCities() = map { City("City-${it + 1}") }

      @Test(timeout = TIMEOUT)
      fun test1Sample() {
        val dublin = City("Dublin")
        val liverpool = City("Liverpool")
        val manchester = City("Manchester")
        val leeds = City("Leeds")

        addConnection(liverpool, manchester)
        addConnection(manchester, leeds)

        checkSample(liverpool, setOf(liverpool, manchester, leeds))
        checkSample(dublin, setOf(dublin))
      }

      @Test(timeout = TIMEOUT)
      fun test2() {
        val cities = (0..4).toCities()

        addConnections(cities, 0 to 1, 1 to 2, 2 to 3, 3 to 4)

        check(cities, 0, setOf(0, 1, 2, 3, 4))
      }

      @Test(timeout = TIMEOUT)
      fun test3() {
        val cities = (0..1).toCities()

        check(cities, 0, setOf(0))
      }

      @Test(timeout = TIMEOUT)
      fun test4() {
        val cities = (0..9).map { City("City$it") }
        addConnections(cities, 1 to 2, 2 to 4, 4 to 5, 1 to 3, 3 to 6, 3 to 7, 8 to 9)

        check(cities, 1, setOf(1, 2, 3, 4, 5, 6, 7))
        check(cities, 9, setOf(8, 9))
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Recursion+%2F+Exercise3
status: Unchecked
record: -1
