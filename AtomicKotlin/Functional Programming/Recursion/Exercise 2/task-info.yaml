type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 104
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 104
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      tailrec fun factorial(
          n: Long,
          accumulator: Long
        ): Long =
          if (n == 1L) accumulator
          else factorial(n - 1, accumulator * n)

        return factorial(n, 1)
  text: |-
    // Recursion/Task2.kt
    package recursionExercise2
    import atomictest.eq

    fun factorial(n: Long): Long {
      TODO()
    }

    fun main() {
      factorial(3) eq 6
      factorial(4) eq 24
      factorial(11) eq 39916800
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package recursionExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestRecursionExercise2 {
      private fun check(number: Long, expected: Long) {
        Assert.assertEquals("Wrong result for 'factorial($number)'",
          expected,
          factorial(number))
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = check(3, 6)

      @Test(timeout = TIMEOUT)
      fun test2Sample() = check(4, 24)

      @Test(timeout = TIMEOUT)
      fun test3Sample() = check(11, 39916800)

      @Test(timeout = TIMEOUT)
      fun test4() = check(13, 6227020800)
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Recursion+%2F+Exercise1
status: Unchecked
record: -1
