type: theory
files:
- name: src/BasicLambda.kt
  visible: true
  text: |-
    // Lambdas/BasicLambda.kt
    import atomictest.eq

    fun main() {
      val list = listOf(1, 2, 3, 4)
      val result = list.map({ n: Int -> "[$n]" })
      result eq listOf("[1]", "[2]", "[3]", "[4]")
    }
  learner_created: false
- name: src/LambdaTypeInference.kt
  visible: true
  text: |-
    // Lambdas/LambdaTypeInference.kt
    import atomictest.eq

    fun main() {
      val list = listOf(1, 2, 3, 4)
      val result = list.map({ n -> "[$n]" })
      result eq listOf("[1]", "[2]", "[3]", "[4]")
    }
  learner_created: false
- name: src/LambdaIt.kt
  visible: true
  text: |-
    // Lambdas/LambdaIt.kt
    import atomictest.eq

    fun main() {
      val list = listOf(1, 2, 3, 4)
      val result = list.map({ "[$it]" })
      result eq listOf("[1]", "[2]", "[3]", "[4]")
    }
  learner_created: false
- name: src/Mapping.kt
  visible: true
  text: |-
    // Lambdas/Mapping.kt
    import atomictest.eq

    fun main() {
      val list = listOf('a', 'b', 'c', 'd')
      val result =
        list.map({ "[${it.toUpperCase()}]" })
      result eq listOf("[A]", "[B]", "[C]", "[D]")
    }
  learner_created: false
- name: src/OmittingParentheses.kt
  visible: true
  text: |-
    // Lambdas/OmittingParentheses.kt
    import atomictest.eq

    fun main() {
      val list = listOf('a', 'b', 'c', 'd')
      val result =
        list.map { "[${it.toUpperCase()}]" }
      result eq listOf("[A]", "[B]", "[C]", "[D]")
    }
  learner_created: false
- name: src/JoinToString.kt
  visible: true
  text: |-
    // Lambdas/JoinToString.kt
    import atomictest.eq

    fun main() {
      val list = listOf(9, 11, 23, 32)
      list.joinToString(" ") { "[$it]" } eq
        "[9] [11] [23] [32]"
    }
  learner_created: false
- name: src/LambdaAndNamedArgs.kt
  visible: true
  text: |-
    // Lambdas/LambdaAndNamedArgs.kt
    import atomictest.eq

    fun main() {
      val list = listOf(9, 11, 23, 32)
      list.joinToString(
        separator = " ",
        transform = { "[$it]" }
      ) eq "[9] [11] [23] [32]"
    }
  learner_created: false
- name: src/TwoArgLambda.kt
  visible: true
  text: |-
    // Lambdas/TwoArgLambda.kt
    import atomictest.eq

    fun main() {
      val list = listOf('a', 'b', 'c')
      list.mapIndexed { index, element ->
        "[$index: $element]"
      } eq listOf("[0: a]", "[1: b]", "[2: c]")
    }
  learner_created: false
- name: src/Underscore.kt
  visible: true
  text: |-
    // Lambdas/Underscore.kt
    import atomictest.eq

    fun main() {
      val list = listOf('a', 'b', 'c')
      list.mapIndexed { index, _ ->
        "[$index]"
      } eq listOf("[0]", "[1]", "[2]")
    }
  learner_created: false
- name: src/ListIndicesMap.kt
  visible: true
  text: |-
    // Lambdas/ListIndicesMap.kt
    import atomictest.eq

    fun main() {
      val list = listOf('a', 'b', 'c')
      list.indices.map {
        "[$it]"
      } eq listOf("[0]", "[1]", "[2]")
    }
  learner_created: false
- name: src/ZeroArguments.kt
  visible: true
  text: |-
    // Lambdas/ZeroArguments.kt
    import atomictest.*

    fun main() {
      run { -> trace("A Lambda") }
      run { trace("Without args") }
      trace eq """
        A Lambda
        Without args
      """
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
