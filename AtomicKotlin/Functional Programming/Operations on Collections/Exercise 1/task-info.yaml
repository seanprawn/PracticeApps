type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 224
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 224
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      people.sortedByDescending { it.age }
          .take(quantity).map { it.name }.sorted()
  text: |-
    // OperationsOnCollections/Task1.kt
    package operationsOnCollectionsExercise1
    import atomictest.eq

    data class Person(val name: String, val age: Int)

    fun findOldest(people: List<Person>, quantity: Int = 1): List<String> =
      TODO()

    fun main() {
      val people = listOf(
        Person("Bob", 30),
        Person("Charlie", 20),
        Person("Alice", 25))
      findOldest(people, 1) eq listOf("Bob")
      findOldest(people, 2) eq listOf("Alice", "Bob")
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package operationsOnCollectionsExercise1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestOperationsOnCollectionsExercise1 {
      private fun checkOldest(list: List<Person>, quantity: Int) {
        Assert.assertEquals("Wrong result for quantity = $quantity in $list:",
          list.sortedByDescending { it.age }
            .take(quantity).map { it.name }.sorted(),
          findOldest(list, quantity)
        )
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() {
        val people = listOf(
          Person("Bob", 30),
          Person("Charlie", 20),
          Person("Alice", 25))
        checkOldest(people, 1)
        checkOldest(people, 2)
      }

      @Test(timeout = TIMEOUT)
      fun test2() {
        val names = setOf("X", "Y", "Z")
        val ages = setOf(10, 20, 30)
        for (i in 1..10) {
          val people = names.shuffled().zip(ages.shuffled()) { name, age ->
            Person(name, age)
          }
          checkOldest(people, 1)
          checkOldest(people, 2)
          checkOldest(people, 32)
        }
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Operations+on+Collections+%2F+Exercise1
status: Unchecked
record: -1
