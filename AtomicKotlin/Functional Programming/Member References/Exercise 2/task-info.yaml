type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 337
    length: 54
    placeholder_text: TODO("compareByDescending(???).then(compareBy(???)))")
    initial_state:
      length: 54
      offset: 337
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      compareByDescending(Student::grade)
          .then(compareBy(Student::lastName, Student::firstName))
  text: |
    // MemberReferences/Task2.kt
    package memberReferencesExercise2
    import atomictest.eq

    data class Student(
      val firstName: String,
      val lastName: String,
      val grade: Int
    ) {
      override fun toString(): String {
        return "$firstName $lastName ($grade)"
      }
    }

    fun List<Student>.sortByGradeAndThenByName(): List<Student> = sortedWith(
      TODO("compareByDescending(???).then(compareBy(???)))"))

    fun main() {
      val people = listOf(
        Student("Alice", "Johnson", 1),
        Student("Bob", "Smith", 2),
        Student("Charlie", "Smith", 2))

      people.sortByGradeAndThenByName() eq
        "[Bob Smith (2), Charlie Smith (2), " +
        "Alice Johnson (1)]"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package memberReferencesExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import java.util.*

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestMemberReferencesExercise2 {
      private fun check(
        list: List<Student>
      ) {
        Assert.assertEquals("Wrong result for $list:",
          list.sortedWith(compareByDescending(Student::grade)
            .then(compareBy(Student::lastName, Student::firstName))),
          list.sortByGradeAndThenByName())
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = check(listOf(
        Student("Alice", "Johnson", 3),
        Student("Bob", "Smith", 2),
        Student("Charlie", "Smith", 2)))

      @Test(timeout = TIMEOUT)
      fun test2() = check(listOf(
        Student("Alice", "Johnson", 1),
        Student("Bob", "Smith", 1),
        Student("Charlie", "Smith", 1)))

      @Test(timeout = TIMEOUT)
      fun test3() = check(listOf(
        Student("Bob", "Smith", 1),
        Student("Alice", "Smith", 1),
        Student("Charlie", "Smith", 1)))

      @Test(timeout = TIMEOUT)
      fun test4() = check(listOf(
        Student("Bob", "Smith", 2),
        Student("Alice", "Smith", 3),
        Student("Charlie", "Smith", 1)))

      @Test(timeout = TIMEOUT)
      fun test5() = check(listOf(
        Student("Alice", "Johnson", 1),
        Student("Alice", "Smith", 1),
        Student("Alice", "Jones", 1)))

      @Test(timeout = TIMEOUT)
      fun test6() {
        val firstNames = ('A'..'E').map { "$it" }
        val lastNames = (1..6).map { "S$it" }
        val random = Random()
        repeat(20) {
          check(firstNames.shuffled().zip(lastNames.shuffled()).map { (firstName, lastName) ->
            Student(firstName, lastName, random.nextInt(4))
          })
        }
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Member+References+%2F+Exercise1
status: Unchecked
record: -1
