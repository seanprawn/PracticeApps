type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 137
    length: 25
    placeholder_text: TODO("fold(???) { ??? }")
    initial_state:
      length: 25
      offset: 137
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fold(false) { found, element ->
          if (predicate(element)) true else found
        }
  text: |-
    // FoldingLists/Task3.kt
    package foldingListsExercise3
    import atomictest.eq

    fun <T> List<T>.any(predicate: (T) -> Boolean): Boolean =
      TODO("fold(???) { ??? }")

    fun main() {
      val list = listOf(1, -2, 3)
      list.any { it < 0 } eq true
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package foldingListsExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import kotlin.collections.any as anyLibrary

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestFoldingListsExercise3 {
      private fun <T> checkAny(list: List<T>, predicateString: String, predicate: (T) -> Boolean) {
        Assert.assertEquals("Wrong 'any' implementation. Wrong result for checking $predicateString in $list:", list.anyLibrary(predicate), list.any(predicate))
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = checkAny(listOf(1, -2, 3), "{ it < 0 }") { it < 0 }

      @Test(timeout = TIMEOUT)
      fun test2() = checkAny(listOf("abc", "cd", "eea"), "{ it.contains('a') }") { it.contains('a') }

      @Test(timeout = TIMEOUT)
      fun test3() = checkAny(listOf("abc", "cd", "eea"), "{ it.contains('f') }") { it.contains('f') }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Folding+Lists+%2F+Exercise3
status: Unchecked
record: -1
