type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 218
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 218
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      for ((index, e) in withIndex()) {
          val transformed = transform(index, e)
          if (transformed != null) {
            result += transformed
          }
        }
  text: |-
    // HigherOrderFunctions/Task3.kt
    package higherOrderFunctionsExercise3
    import atomictest.eq

    fun <T, R : Any> Iterable<T>.mapIndexedNotNull(
      transform: (Int, T) -> R?
    ): List<R> {
      val result = mutableListOf<R>()
      TODO()
      return result
    }

    fun main() {
      val list = listOf("a", "b", "c", "d")
      list.mapIndexedNotNull { index, s ->
        if (index % 2 == 0) "$s!" else null
      } eq listOf("a!", "c!")
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package higherOrderFunctionsExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import kotlin.collections.mapIndexedNotNull as mapIndexedNotNullLibrary

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestHigherOrderFunctionsExercise3 {
      private fun <T, R : Any> check(
        list: List<T>,
        predicateStr: String,
        predicate: (Int, T) -> R?
      ) {
        Assert.assertEquals("Wrong result for $list\n" +
          "predicate = $predicateStr",
          list.mapIndexedNotNull(predicate),
          list.mapIndexedNotNullLibrary(predicate))
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = check(listOf(1, 2, 3), "{ index, e -> \"\$index: \$e!\" }") { index, e -> "$index: $e!" }

      @Test(timeout = TIMEOUT)
      fun test2() = check(listOf("1", "2", "3"), "{ index, e -> index + e.toInt() }") { index, e -> index + e.toInt() }

      @Test(timeout = TIMEOUT)
      fun test3() = check(listOf("1", "2", "d"),
        """
                {
                    index, e ->
                    val i = e.toIntOrNull()
                    if (i == null) null else index * i
                }""".replaceIndent()
      ) { index, e ->
        val i = e.toIntOrNull()
        if (i == null) null else index * i
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise3
status: Unchecked
record: -1
