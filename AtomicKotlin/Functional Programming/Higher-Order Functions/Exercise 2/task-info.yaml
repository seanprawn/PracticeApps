type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 244
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 244
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: if (it % 2 == 0) it * it else null
  text: |-
    // HigherOrderFunctions/Task2.kt
    package higherOrderFunctionsExercise2
    import atomictest.eq

    fun List<Int>.transformVersion1(): List<Int> =
      filter { it % 2 == 0 }.map { it * it }

    fun List<Int>.transformVersion2(): List<Int> =
      mapNotNull { TODO() }

    fun main() {
      val list = listOf(1, 2, 3)
      list.transformVersion1() eq listOf(4)
      list.transformVersion2() eq listOf(4)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package higherOrderFunctionsExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestHigherOrderFunctionsExercise2 {
      private fun check(
        list: List<Int>
      ) {
        Assert.assertEquals("Wrong result for $list:",
          list.filter { it % 2 == 0 }.map { it * it },
          list.transformVersion2())
        list.transformVersion1()
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = check(listOf(1, 2, 3))

      @Test(timeout = TIMEOUT)
      fun test2() = check(listOf(1, -2, 3, -4))

      @Test(timeout = TIMEOUT)
      fun test3() = check(listOf(11, 22, 30))
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise2
status: Unchecked
record: -1
