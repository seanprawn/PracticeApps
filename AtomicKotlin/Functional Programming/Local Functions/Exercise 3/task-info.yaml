type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 142
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 142
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      var i: Int? = null
          fun add(value: Int) {
              i = value
          }
          fun remove(): Int? {
              val result = i
              i = null
              return result
          }
          return Pair(::add, ::remove)
  text: |-
    // LocalFunctions/Task3.kt
    package localFunctionsExercise3
    import atomictest.eq

    fun createContainer(): Pair<(Int) -> Unit, () -> Int?> {
        TODO()
    }

    fun main() {
        val (add, remove) = createContainer()
        add(42)
        remove() eq 42
        remove() eq null
        add(121)
        remove() eq 121
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package localFunctionsExercise3

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.loadFileFacade
    import util.loadToplevelFunction
    import kotlin.reflect.typeOf
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    @OptIn(ExperimentalStdlibApi::class)
    class TestLocalFunctionsExercise3 {
        @Test
        fun `#01 function signature`() {
            val createContainerFunc = ::createContainer
            assertEquals(
                    actual = createContainerFunc.returnType,
                    expected = typeOf<Pair<(Int) -> Unit, () -> Int?>>(),
                    message = "Invalid return type of the 'createContainer' function'"
            )
        }

        @Test
        fun `#02 container usage from main`() {
            val (add, remove) = createContainer()
            assertEquals(null, remove(), "Initial value in the container should be null")
            add(42)
            assertEquals(42, remove(), "Removed value should be equal to the added: 42")
            assertEquals(null, remove(), "Removed value from empty container should be null")
            add(121)
            assertEquals(121, remove(), "Removed value should be equal to the added: 121")
        }
    }
  learner_created: false
status: Unchecked
record: -1
