type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 197
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 197
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      for (element in this) {
          val list = result.getOrPut(keySelector(element)) { mutableListOf() }
          list += element
        }
  text: |-
    // BuildingMaps/Task2.kt
    package buildingMapsExercise2
    import atomictest.eq

    fun <T, R> List<T>.groupBy(keySelector: (T) -> R): Map<R, List<T>> {
      val result = mutableMapOf<R, MutableList<T>>()
      TODO()
      return result
    }

    data class Person(val name: String, val age: Int)

    fun main() {
      val people = listOf(Person("Alice", 21),
        Person("Bob", 25), Person("Charlie", 25))

      people.groupBy(Person::age) eq
        "{21=[Person(name=Alice, age=21)], " +
        "25=[Person(name=Bob, age=25), Person(name=Charlie, age=25)]}"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package buildingMapsExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import kotlin.collections.groupBy as groupByLibrary

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBuildingMapsExercise2 {
      private fun <T, R> check(
        list: List<T>,
        keySelector: (T) -> R,
        keySelectorStr: String
      ) {
        Assert.assertEquals("Wrong result for $list grouped by $keySelectorStr",
          list.groupByLibrary(keySelector),
          list.groupBy(keySelector))
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = check(listOf(Person("Alice", 21),
        Person("Bob", 25), Person("Charlie", 25)),
        Person::age, "Person::age")

      @Test(timeout = TIMEOUT)
      fun test2() = check(listOf("abc", "ahh", "never"),
        { it.first() }, "{ it.first() }")

      @Test(timeout = TIMEOUT)
      fun test3() = check((1..20).toList(), { it % 3 }, "{ it % 3 }")

      @Test(timeout = TIMEOUT)
      fun test4() = check(listOf(Person("Alice", 21),
        Person("Bob", 25), Person("Charlie", 25)),
        Person::name, "Person::name")
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+From+Lists+to+Maps+%2F+Exercise2
status: Unchecked
record: -1
