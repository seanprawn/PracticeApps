type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 146
    length: 21
    placeholder_text: TODO("???.flatten()")
    initial_state:
      length: 21
      offset: 146
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: map(f).flatten()
  text: |-
    // ManipulatingLists/Task5.kt
    package manipulatingListsExercise5
    import atomictest.eq

    fun <T, R> List<T>.flatMap(f: (T) -> List<R>): List<R> =
      TODO("???.flatten()")

    fun main() {
      val list = listOf(3, 1, 4)

      list.flatMap { (0..it).toList() } eq
        listOf(0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 4)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package manipulatingListsExercise5

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import kotlin.collections.flatMap as flatMapLibrary

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestManipulatingListsExercise5 {
      private fun <T, R> checkFlatMap(
        list: List<T>,
        transform: (T) -> List<R>
      ) {
        Assert.assertEquals("Wrong 'flatMap' implementation",
          list.flatMapLibrary(transform),
          list.flatMap(transform))
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = checkFlatMap(listOf(3, 1, 4)) { (0..it).toList() }

      @Test(timeout = TIMEOUT)
      fun test2() = checkFlatMap(listOf(10, 20, 30)) { listOf(it, it + 1, it + 2) }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise5
status: Unchecked
record: -1
