type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 142
    length: 16
    placeholder_text: TODO("zip(???)")
    initial_state:
      length: 16
      offset: 142
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: zip(indices)
  text: |-
    // ManipulatingLists/Task1.kt
    package manipulatingListsExercise1
    import atomictest.eq

    fun <T> List<T>.zipWithIndex(): List<Pair<T, Int>> =
      TODO("zip(???)")

    fun main() {
      val list = listOf('a', 'b', 'c')
      list.zipWithIndex() eq
        "[(a, 0), (b, 1), (c, 2)]"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package manipulatingListsExercise1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestManipulatingListsExercise1 {
      private fun <T> check(
        list: List<T>
      ) {
        Assert.assertEquals("Wrong result for $list:",
          list.zip(list.indices),
          list.zipWithIndex())
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = check(listOf('a', 'b', 'c'))

      @Test(timeout = TIMEOUT)
      fun test2() = check(listOf(1, 2, 3, 4, 5))

      @Test(timeout = TIMEOUT)
      fun test3() = check(listOf("ab", "bd"))

      @Test(timeout = TIMEOUT)
      fun test4() = check(listOf<Any>())
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise1
status: Unchecked
record: -1
