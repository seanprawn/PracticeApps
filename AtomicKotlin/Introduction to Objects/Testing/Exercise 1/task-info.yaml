type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 95
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 95
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: if (number > 0) number else -number
  - offset: 118
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 118
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      abs(0) eq 0
        abs(42) eq 42
        abs(-239) eq 239
  text: |-
    // Testing/Task1.kt
    package testingExercise1
    import atomictest.eq

    fun abs(number: Int): Int = TODO()

    fun main() {
      TODO()
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package testingExercise1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.runAndGetSystemOutput
    import kotlin.math.absoluteValue

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestTestingExercise1 {

      private fun checkFunction(number: Int) {
        val abs = number.absoluteValue
        Assert.assertEquals("abs($number) should return $abs",
          abs, ifExpressionsExercise2.abs(number))
      }

      @Test(timeout = TIMEOUT)
      fun testAbs1() = checkFunction(1)

      @Test(timeout = TIMEOUT)
      fun testAbs2() = checkFunction(-3)

      @Test(timeout = TIMEOUT)
      fun testAbs3() = checkFunction(-1001)

      @Test(timeout = TIMEOUT)
      fun testAbs4() = checkFunction(0)

      @Test(timeout = TIMEOUT)
      fun testOutput() {
        val output = runAndGetSystemOutput(::main)
        fun checkArgument(arg: Int) {
          Assert.assertTrue(
            "The 'abs($arg)' call should be tested using 'eq'",
            arg.absoluteValue.toString() in output)
        }
        checkArgument(0)
        checkArgument(42)
        checkArgument(-239)
      }
    }
  learner_created: false
status: Unchecked
record: -1
