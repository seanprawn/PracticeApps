type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 99
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 99
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      var max = 0
        for (e in list) {
          if (max <= e) {
            max = e
          }
        }
        return max
  text: |-
    // Lists/Task1.kt
    package listsExercise1
    import atomictest.eq

    fun findMax(list: IntList): Int {
      TODO()
    }

    fun main() {
      val list = IntList(listOf(1, 2, 3, 2))
      findMax(list) eq 3
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package listsExercise1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestListsExercise1 {
      private fun checkMaximum(list: List<Int>, max: Int) {
        val intList = IntList(list)
        Assert.assertEquals("Incorrect maximum for $intList", max, findMax(intList))
      }

      @Test(timeout = TIMEOUT)
      fun test1OneElement() {
        checkMaximum(listOf(1), 1)
      }

      @Test(timeout = TIMEOUT)
      fun test2TwoElements() {
        checkMaximum(listOf(1, 4), 4)
      }

      @Test(timeout = TIMEOUT)
      fun test3EmptyList() {
        checkMaximum(listOf(), 0)
      }

      @Test(timeout = TIMEOUT)
      fun test4SeveralElements() {
        checkMaximum(listOf(6, 2, 111, 7, 19, 21, 50), 111)
      }

      @Test(timeout = TIMEOUT)
      fun testFirstMax() {
        checkMaximum(listOf(111, 6, 2, 7, 19, 21, 50), 111)
      }

      @Test(timeout = TIMEOUT)
      fun test5LastMax() {
        checkMaximum(listOf(6, 2, 7, 19, 21, 50, 111), 111)
      }
    }
  learner_created: false
- name: src/IntList1.kt
  visible: true
  text: |-
    // Lists/IntList1.kt
    package listsExercise1

    class IntList(private val list: List<Int>) : Iterable<Int> {

      override fun iterator(): Iterator<Int> = list.iterator()

      operator fun get(index: Int): Int = list[index]

      override fun toString() = list.toString()

      fun size() = list.size
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Lists+%2F+Exercise1
status: Unchecked
record: -1
