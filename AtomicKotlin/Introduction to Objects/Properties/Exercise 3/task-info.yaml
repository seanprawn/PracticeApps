type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 68
    length: 21
    placeholder_text: |-
      var x = 0
        var y = 0
    initial_state:
      length: 21
      offset: 68
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      var x = 0
        var y = 0
        val fieldSize = 100

        fun crossBoundary(coordinate: Int): Int {
          val inBounds = coordinate % fieldSize
          return if (inBounds < 0) {
            fieldSize + inBounds
          } else {
            inBounds
          }
        }
  - offset: 121
    length: 10
    placeholder_text: x += steps
    initial_state:
      length: 10
      offset: 121
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      x += steps
          x = crossBoundary(x)
  - offset: 166
    length: 10
    placeholder_text: x -= steps
    initial_state:
      length: 10
      offset: 166
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      x -= steps
          x = crossBoundary(x)
  - offset: 211
    length: 10
    placeholder_text: y += steps
    initial_state:
      length: 10
      offset: 211
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      y += steps
          y = crossBoundary(y)
  - offset: 254
    length: 10
    placeholder_text: y -= steps
    initial_state:
      length: 10
      offset: 254
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      y -= steps
          y = crossBoundary(y)
  text: |-
    // Properties/Task3.kt
    package propertiesExercise3

    class Robot {
      var x = 0
      var y = 0

      fun right(steps: Int) {
        x += steps
      }

      fun left(steps: Int) {
        x -= steps
      }

      fun down(steps: Int) {
        y += steps
      }

      fun up(steps: Int) {
        y -= steps
      }

      fun getLocation(): String = "($x, $y)"
    }

    fun main() {
      val robot = Robot()
      println(robot.getLocation())
      robot.up(1)
      println(robot.getLocation())
      robot.left(10)
      println(robot.getLocation())
    }
    /* Output:
    (0, 0)
    (0, 99)
    (90, 99)
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package propertiesExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestPropertiesExercise3 {
      class RobotHandler {
        val robot: Robot = Robot()
        val loggedMovements = StringBuilder()

        fun goRight(steps: Int) {
          robot.right(steps)
          loggedMovements.appendLine("goRight($steps)")
        }

        fun goLeft(steps: Int) {
          robot.left(steps)
          loggedMovements.appendLine("goLeft($steps)")

        }

        fun goDown(steps: Int) {
          robot.down(steps)
          loggedMovements.appendLine("goDown($steps)")

        }

        fun goUp(steps: Int) {
          robot.up(steps)
          loggedMovements.appendLine("goUp($steps)")
        }
      }

      private fun testMovements(location: String, movements: RobotHandler.() -> Unit) {
        val robotHandler = RobotHandler()
        robotHandler.movements()
        val actualLocation = robotHandler.robot.getLocation()
        val message = if (robotHandler.loggedMovements.isEmpty()) {
          "Initial location of the robot should be (0,0)"
        } else {
          "Wrong location after:\n" + robotHandler.loggedMovements
        }
        Assert.assertEquals(message, location, actualLocation)
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = testMovements("(90, 99)") {
        goUp(1)
        goLeft(10)
      }

      @Test(timeout = TIMEOUT)
      fun test2Left() = testMovements("(70, 0)") {
        goLeft(30)
      }

      @Test(timeout = TIMEOUT)
      fun test3Up() = testMovements("(0, 99)") {
        goUp(1)
      }

      @Test(timeout = TIMEOUT)
      fun test4Left() = testMovements("(70, 0)") {
        goLeft(130)
      }

      @Test(timeout = TIMEOUT)
      fun test5Up() = testMovements("(0, 99)") {
        goUp(101)
      }

      @Test(timeout = TIMEOUT)
      fun test6Right() = testMovements("(10, 0)") {
        goRight(110)
      }

      @Test(timeout = TIMEOUT)
      fun test7Down() = testMovements("(0, 20)") {
        goDown(120)
      }

      @Test(timeout = TIMEOUT)
      fun test8SeveralSteps() = testMovements("(10, 10)") {
        goRight(313)
        goDown(415)
        goUp(505)
        goLeft(703)
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Properties+%2F+Exercise2
status: Unchecked
record: -1
