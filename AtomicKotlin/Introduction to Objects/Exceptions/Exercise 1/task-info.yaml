type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 106
    length: 3
    placeholder_text: ???
    initial_state:
      length: 3
      offset: 106
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 1,2
  - offset: 115
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 115
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      println("12".toDouble())
        println("1.2".toDouble())
        //println("1,2".toDouble())
        println("1.2e0".toDouble())
        println("1.2e1".toDouble())
        println("1.2e2".toDouble())
        println("1.2e3".toDouble())
        println("1.2e10".toDouble())
        println(("12.3e10").toDouble())
        println("1.2e-1".toDouble())
        println("1.2e-10".toDouble())
  text: |-
    // Exceptions/Task1.kt
    package exceptionsExercise1

    fun main() {
      println("Can't be converted to double: ???")

      // TODO
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package exceptionsExercise1

    import org.junit.Assert
    import org.junit.Test
    import util.TIMEOUT
    import util.runAndGetSystemOutput

    class TestExceptionsExercise1 {
      @Test(timeout = TIMEOUT)
      fun testOutput() {
        val output = runAndGetSystemOutput(::main)
        Assert.assertTrue("No output for 'main' function", output.isNotEmpty())
        val first = output.lines().first()
        Assert.assertTrue("Wrong output for 'main' function. " +
          "It is expected to start with 'Can't be converted to double: '. " +
          "Was: $first", first.startsWith("Can't be converted to double: "))
        val value = first.substringAfter("Can't be converted to double: ")
        Assert.assertEquals("Wrong result", "1,2", value)
      }
    }
  learner_created: false
status: Unchecked
record: -1
