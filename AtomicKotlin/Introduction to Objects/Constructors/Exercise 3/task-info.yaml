type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 628
    length: 24
    placeholder_text: /* Implement toString */
    initial_state:
      length: 24
      offset: 628
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: override fun toString() = "Robot(x=$x, y=$y)"
  text: |-
    // Constructors/Task3.kt
    package constructorsExercise3

    class Robot(val fieldSize: Int, var x: Int, var y: Int) {
      fun crossBoundary(coordinate: Int): Int {
        val inBounds = coordinate % fieldSize
        return if (inBounds < 0) {
          fieldSize + inBounds
        } else {
          inBounds
        }
      }

      fun goRight(steps: Int) {
        x += steps
        x = crossBoundary(x)
      }

      fun goLeft(steps: Int) {
        x -= steps
        x = crossBoundary(x)
      }

      fun goDown(steps: Int) {
        y += steps
        y = crossBoundary(y)
      }

      fun goUp(steps: Int) {
        y -= steps
        y = crossBoundary(y)
      }

      fun getLocation(): String = "($x, $y)"

      /* Implement toString */
    }

    fun main() {
      val robot = Robot(10, 1, 1)
      println(robot)
    }
    /* Output:
    Robot(x=1, y=1)
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package constructorsExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestConstructorsExercise3 {
      class RobotHandler(fieldSize: Int, var x: Int, var y: Int) {
        val robot: Robot = Robot(fieldSize, x, y)
        val loggedMovements = StringBuilder()

        fun goRight(steps: Int) {
          robot.goRight(steps)
          loggedMovements.appendLine("right($steps)")
        }

        fun goLeft(steps: Int) {
          robot.goLeft(steps)
          loggedMovements.appendLine("left($steps)")

        }

        fun goDown(steps: Int) {
          robot.goDown(steps)
          loggedMovements.appendLine("down($steps)")

        }

        fun goUp(steps: Int) {
          robot.goUp(steps)
          loggedMovements.appendLine("up($steps)")
        }
      }

      private fun testMovements(string: String, fieldSize: Int, x: Int, y: Int,
                                movements: RobotHandler.() -> Unit) {
        val robotHandler = RobotHandler(fieldSize, x, y)
        robotHandler.movements()
        val actualString = robotHandler.robot.toString()
        val message = if (robotHandler.loggedMovements.isEmpty()) {
          "Initial location of the robot should be ($x, $y)"
        } else {
          "Starting location: ($x, $y), field size: $fieldSize.\n" +
            "Wrong location after:\n" + robotHandler.loggedMovements
        }
        Assert.assertEquals(message, string, actualString)
      }

      @Test(timeout = TIMEOUT)
      fun test1Initial() = testMovements("Robot(x=2, y=3)", 10, 2, 3) {}

      @Test(timeout = TIMEOUT)
      fun test2Right() = testMovements("Robot(x=3, y=3)", 10, 2, 3) {
        goRight(1)
      }

      @Test(timeout = TIMEOUT)
      fun test3Circle() = testMovements("Robot(x=2, y=3)", 10, 2, 3) {
        goRight(10)
        goLeft(10)
        goDown(10)
        goUp(10)
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Constructors+%2F+Exercise2
status: Unchecked
record: -1
