type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 143
    length: 761
    placeholder_text: |-
      fun setFahrenheit(now: Double) {
          current = now
          scale = "f"
        }
        fun setCelsius(now: Double) {
          current = now
          scale = "c"
        }
        fun getFahrenheit(): Double =
          if (scale == "f")
            current
          else
            current * 9.0 / 5.0 + 32.0
        fun getCelsius(): Double =
          if (scale == "c")
            current
          else
            (current - 32.0) * 5.0 / 9.0
    initial_state:
      length: 359
      offset: 147
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      var fahrenheit: Double
          set(now) {
            current = now
            scale = "f"
          }
          get(): Double =
            if (scale == "f")
              current
            else
              current * 9.0 / 5.0 + 32.0

        var celsius: Double
          set(now) {
            current = now
            scale = "c"
          }
          get(): Double =
            if (scale == "c")
              current
            else
              (current - 32.0) * 5.0 / 9.0
  - offset: 950
    length: 122
    placeholder_text: |-
      temp.setFahrenheit(98.6)
        temp.getFahrenheit() eq 98.6
        temp.getCelsius() eq 37.0
        temp.setCelsius(100.0)
        temp.getFahrenheit() eq 212.0
    initial_state:
      length: 140
      offset: 552
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      temp.fahrenheit = 98.6
        temp.fahrenheit eq 98.6
        temp.celsius eq 37.0
        temp.celsius = 100.0
        temp.fahrenheit eq 212.0
  text: |-
    // Summary2/Task6.kt
    package summaryIIExercise6
    import atomictest.eq

    class Temperature {
      private var current = 0.0
      private var scale = "f"

      fun setFahrenheit(now: Double) {
        current = now
        scale = "f"
      }
      fun setCelsius(now: Double) {
        current = now
        scale = "c"
      }
      fun getFahrenheit(): Double =
        if (scale == "f")
          current
        else
          current * 9.0 / 5.0 + 32.0
      fun getCelsius(): Double =
        if (scale == "c")
          current
        else
          (current - 32.0) * 5.0 / 9.0
    }

    fun main() {
      val temp = Temperature()
      temp.setFahrenheit(98.6)
      temp.getFahrenheit() eq 98.6
      temp.getCelsius() eq 37.0
      temp.setCelsius(100.0)
      temp.getFahrenheit() eq 212.0
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package summaryIIExercise6

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.loadMemberProperty
    import kotlin.reflect.KMutableProperty
    import kotlin.reflect.KProperty

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSummaryIIExercise6 {
      private enum class MeasureSystem(val title: String) {
        FAHRENHEIT("fahrenheit"), CELSIUS("celsius");

        override fun toString(): String = title
      }

      private class TempValue(val value: Double, val system: MeasureSystem)

      private fun testChange(initial: TempValue, expected: TempValue) {
        val temp = Temperature()
        val initialProp = loadMemberProperty(temp::class, initial.system.title)
        val expectedProp = loadMemberProperty(temp::class, expected.system.title)

        fun assertMutable(tempValue: TempValue, prop: KProperty<*>) {
          Assert.assertTrue("The '${tempValue.system}' property is expected to be mutable", prop is KMutableProperty<*>)
        }
        assertMutable(initial, initialProp)
        assertMutable(expected, expectedProp)

        (initialProp as KMutableProperty<*>).setter.call(temp, initial.value)
        val actual = expectedProp.getter.call(temp)
        Assert.assertEquals("The '${expected.system}' property is expected to be ${expected.value} " +
          "after setting '${initial.system}' to ${initial.value}", expected.value, actual)
      }

      @Test(timeout = TIMEOUT)
      fun test1Fahrenheit() {
        testChange(TempValue(90.0, MeasureSystem.FAHRENHEIT), TempValue(90.0, MeasureSystem.FAHRENHEIT))
      }

      @Test(timeout = TIMEOUT)
      fun test2Celsius() {
        testChange(TempValue(30.0, MeasureSystem.CELSIUS), TempValue(30.0, MeasureSystem.CELSIUS))
      }

      @Test(timeout = TIMEOUT)
      fun test3Change() {
        testChange(TempValue(86.0, MeasureSystem.FAHRENHEIT), TempValue(30.0, MeasureSystem.CELSIUS))
      }

      @Test(timeout = TIMEOUT)
      fun test4Change() {
        testChange(TempValue(30.0, MeasureSystem.CELSIUS), TempValue(86.0, MeasureSystem.FAHRENHEIT))
      }
    }
  learner_created: false
status: Solved
record: -1
