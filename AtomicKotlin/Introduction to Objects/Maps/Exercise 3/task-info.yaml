type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 261
    length: 20
    placeholder_text: MutableList<Hamster>
    initial_state:
      length: 20
      offset: 261
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: MutableMap<String, Hamster>
  - offset: 288
    length: 24
    placeholder_text: mutableListOf<Hamster>()
    initial_state:
      length: 24
      offset: 288
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: mutableMapOf()
  - offset: 420
    length: 19
    placeholder_text: hamsters += hamster
    initial_state:
      length: 19
      offset: 420
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: hamsters[hamster.name] = hamster
  - offset: 491
    length: 168
    placeholder_text: |-
      {
          for (hamster in hamsters) {
            if (hamster.name == name) {
              return hamster
            }
          }
          throw NoSuchElementException("No hamster called $name")
        }
    initial_state:
      length: 168
      offset: 491
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      =
          hamsters.getValue(name)
  text: |-
    // Maps/Task3.kt
    package mapsExercise3
    import atomictest.capture
    import atomictest.eq

    class Hamster(val name: String) {
      override fun toString(): String {
        return "Hamster('$name')"
      }
    }

    class Cage(private val maxCapacity: Int) {
      private val hamsters: MutableList<Hamster> =
        mutableListOf<Hamster>()

      fun put(hamster: Hamster): Boolean =
        if (hamsters.size == maxCapacity)
          false
        else {
          hamsters += hamster
          true
        }

      fun get(name: String): Hamster {
        for (hamster in hamsters) {
          if (hamster.name == name) {
            return hamster
          }
        }
        throw NoSuchElementException("No hamster called $name")
      }
    }

    fun main() {
      val cage = Cage(2)
      cage.put(Hamster("Alice")) eq true
      cage.get("Alice") eq "Hamster('Alice')"
      capture {
        cage.get("Bob")
      } eq "NoSuchElementException: " +
        "Key Bob is missing in the map."
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package mapsExercise3

    import mapsExercise2.Cage
    import mapsExercise2.Hamster
    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestMapsExercise3 {
      @Test(timeout = TIMEOUT)
      fun test1SampleSuccess() {
        val cage = Cage(2)
        cage.put(Hamster("Alice"))
        Assert.assertEquals("'get' should return a hamster with a given name",
          "Hamster('Alice')", cage.get("Alice").toString())
      }

      @Test(timeout = TIMEOUT)
      fun test2SampleNoHamster() {
        val cage = Cage(2)
        cage.put(Hamster("Alice"))
        try {
          cage.get("Bob")
        } catch (e: NoSuchElementException) {
          Assert.assertEquals("Expected 'NoSuchElementException' when the cage doesn't contain a hamster with a given name:",
            e.javaClass.simpleName + (e.message?.let { ": $it" } ?: ""),
            "NoSuchElementException: No hamster called Bob")
        }
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Maps+%2F+Exercise3
status: Unchecked
record: -1
