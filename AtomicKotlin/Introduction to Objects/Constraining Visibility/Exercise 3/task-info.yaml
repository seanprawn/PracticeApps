type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 347
    length: 0
    placeholder_text: ""
    initial_state:
      length: 0
      offset: 347
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      private fun checkSteps(steps: Int): Boolean {
          if (steps <= 0) {
            println("steps argument must be positive, is $steps")
            return true
          }
          return false
        }
  - offset: 379
    length: 33
    placeholder_text: |-
      x += steps
        x = crossBoundary(x)
    initial_state:
      length: 33
      offset: 379
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if (checkSteps(steps)) return
          x += steps
          x = crossBoundary(x)
  - offset: 447
    length: 33
    placeholder_text: |-
      x -= steps
        x = crossBoundary(x)
    initial_state:
      length: 33
      offset: 447
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if (checkSteps(steps)) return
          x -= steps
          x = crossBoundary(x)
  - offset: 515
    length: 33
    placeholder_text: |-
      y += steps
        y = crossBoundary(y)
    initial_state:
      length: 33
      offset: 515
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if (checkSteps(steps)) return
          y += steps
          y = crossBoundary(y)
  - offset: 581
    length: 33
    placeholder_text: |-
      y -= steps
        y = crossBoundary(y)
    initial_state:
      length: 33
      offset: 581
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      if (checkSteps(steps)) return
          y -= steps
          y = crossBoundary(y)
  text: "// Visibility/Task3.kt\npackage constrainingVisibilityExercise3\n\nclass\
    \ Robot(\n  private val fieldSize: Int,\n  private var x: Int,\n  private var\
    \ y: Int\n) {\n  private fun crossBoundary(coordinate: Int): Int {\n    val inBounds\
    \ = coordinate % fieldSize\n    return if (inBounds < 0) {\n      fieldSize +\
    \ inBounds\n    } else {\n      inBounds\n    }\n  }\n\n  \n\n  fun right(steps:\
    \ Int) {\n    x += steps\n  x = crossBoundary(x)\n  }\n\n  fun left(steps: Int)\
    \ {\n    x -= steps\n  x = crossBoundary(x)\n  }\n\n  fun down(steps: Int) {\n\
    \    y += steps\n  y = crossBoundary(y)\n  }\n\n  fun up(steps: Int) {\n    y\
    \ -= steps\n  y = crossBoundary(y)\n  }\n\n  fun getLocation(): String = \"($x,\
    \ $y)\"\n\n  override fun toString() = \"Robot(x=$x,y = $y)\"\n}\n\nfun main()\
    \ {\n  val robot = Robot(10, 1, 1)\n  robot.right(-1)\n}\n/* Output:\nsteps argument\
    \ must be positive, is -1\n*/"
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package constrainingVisibilityExercise3

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.checkSystemOutput
    import util.runAndGetSystemOutput

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestConstrainingVisibilityExercise3 {
      class RobotHandler {
        val robot: Robot = Robot(10, 0, 0)
        val loggedMovements = StringBuilder()
        var loggedSteps: Int? = null

        fun goRight(steps: Int) {
          robot.right(steps)
          loggedMovements.appendLine("right($steps)")
          loggedSteps = steps
        }

        fun goLeft(steps: Int) {
          robot.left(steps)
          loggedMovements.appendLine("left($steps)")
          loggedSteps = steps
        }

        fun goDown(steps: Int) {
          robot.down(steps)
          loggedMovements.appendLine("down($steps)")
          loggedSteps = steps
        }

        fun goUp(steps: Int) {
          robot.up(steps)
          loggedMovements.appendLine("up($steps)")
          loggedSteps = steps
        }
      }

      private fun getErrorMessageText(steps: Int?) =
        "steps argument must be positive, is $steps"

      private fun testWrongArgumentOutput(movements: RobotHandler.() -> Unit) {
        val robotHandler = RobotHandler()

        val output = runAndGetSystemOutput {
          robotHandler.movements()
        }

        val steps = robotHandler.loggedSteps
        val message = "Incorrect output after:\n" + robotHandler.loggedMovements
        if (output.isEmpty()) {
          throw AssertionError(message + "\nThe message " +
            "\"${getErrorMessageText(steps)}\" should be printed to the console")
        }
        checkSystemOutput(message,
          getErrorMessageText(steps),
          output)
      }


      @Test(timeout = TIMEOUT)
      fun test1Right() = testWrongArgumentOutput {
        goRight(-5)
      }

      @Test(timeout = TIMEOUT)
      fun test2Left() = testWrongArgumentOutput {
        goLeft(0)
      }

      @Test(timeout = TIMEOUT)
      fun test3Up() = testWrongArgumentOutput {
        goUp(-10)
      }

      @Test(timeout = TIMEOUT)
      fun test4Down() = testWrongArgumentOutput {
        goDown(-50)
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise2
status: Unchecked
record: -1
