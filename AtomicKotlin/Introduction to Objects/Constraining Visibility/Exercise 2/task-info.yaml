type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 79
    length: 3
    placeholder_text: val
    initial_state:
      length: 3
      offset: 79
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: private val
  - offset: 101
    length: 3
    placeholder_text: var
    initial_state:
      length: 3
      offset: 101
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: private var
  - offset: 115
    length: 3
    placeholder_text: var
    initial_state:
      length: 3
      offset: 115
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: private var
  - offset: 132
    length: 3
    placeholder_text: fun
    initial_state:
      length: 3
      offset: 132
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: private fun
  text: |-
    // Visibility/Task2.kt
    package constrainingVisibilityExercise2

    class Robot(
      val fieldSize: Int,
      var x: Int,
      var y: Int
    ) {
      fun crossBoundary(coordinate: Int): Int {
        val inBounds = coordinate % fieldSize
        return if (inBounds < 0) {
          fieldSize + inBounds
        } else {
          inBounds
        }
      }

      fun right(steps: Int) {
        x += steps
        x = crossBoundary(x)
      }

      fun left(steps: Int) {
        x -= steps
        x = crossBoundary(x)
      }

      fun down(steps: Int) {
        y += steps
        y = crossBoundary(y)
      }

      fun up(steps: Int) {
        y -= steps
        y = crossBoundary(y)
      }

      fun getLocation(): String = "($x, $y)"

      override fun toString() = "Robot(x=$x, y=$y)"
    }

    fun main() {
      val robot = Robot(10, 1, 1)
      // Should be "can't access x" error:
    //  println(robot.x)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package constrainingVisibilityExercise2

    import org.junit.Assert
    import org.junit.Test
    import util.TIMEOUT

    class TestConstrainingVisibilityExercise2 {
      @Test(timeout = TIMEOUT)
      fun testCheckAllThePropertiesArePrivate() {
        val robotMethods = setOf("right", "left", "down", "up", "getLocation")
        val objectMethods = setOf("wait", "equals", "toString", "hashCode", "getClass", "notify", "notifyAll")
        val publicMethods = robotMethods + objectMethods

        val robotClass = Robot::class.java
        val otherMethods = robotClass.methods.filter { it.name !in publicMethods }.map { it.name }

        val (getters, methods) = otherMethods
          .filterNot { it.startsWith("set") }
          .partition { it.startsWith("get") }
        val properties = getters.map { it.substringAfter("get").decapitalize() }
        val message = buildString {
          properties.forEach {
            appendLine("The property '$it' should be private")
          }
          methods.forEach {
            appendLine("The member function '$it' should be private")
          }
        }
        Assert.assertTrue(message, otherMethods.isEmpty())
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise1
status: Unchecked
record: -1
