type: theory
files:
- name: src/ListOf.kt
  visible: true
  text: |-
    // Varargs/ListOf.kt
    import atomictest.eq

    fun main() {
      listOf(1) eq "[1]"
      listOf("a", "b") eq "[a, b]"
    }
  learner_created: false
- name: src/VariableArgList.kt
  visible: true
  text: |-
    // Varargs/VariableArgList.kt
    package varargs

    fun v(s: String, vararg d: Double) {}

    fun main() {
      v("abc", 1.0, 2.0)
      v("def", 1.0, 2.0, 3.0, 4.0)
      v("ghi", 1.0, 2.0, 3.0, 4.0, 5.0, 6.0)
    }
  learner_created: false
- name: src/VarargSum.kt
  visible: true
  text: |-
    // Varargs/VarargSum.kt
    package varargs
    import atomictest.eq

    fun sum(vararg numbers: Int): Int {
      var total = 0
      for (n in numbers) {
        total += n
      }
      return total
    }

    fun main() {
      sum(13, 27, 44) eq 84
      sum(1, 3, 5, 7, 9, 11) eq 36
      sum() eq 0
    }
  learner_created: false
- name: src/VarargLikeList.kt
  visible: true
  text: |-
    // Varargs/VarargLikeList.kt
    package varargs
    import atomictest.eq

    fun evaluate(vararg ints: Int) =
      "Size: ${ints.size}\n" +
      "Sum: ${ints.sum()}\n" +
      "Average: ${ints.average()}"

    fun main() {
      evaluate(10, -3, 8, 1, 9) eq """
        Size: 5
        Sum: 25
        Average: 5.0
      """
    }
  learner_created: false
- name: src/SpreadOperator.kt
  visible: true
  text: |-
    // Varargs/SpreadOperator.kt
    import varargs.sum
    import atomictest.eq

    fun main() {
      val array = intArrayOf(4, 5)
      sum(1, 2, 3, *array, 6) eq 21  // [1]
      // Doesn't compile:
      // sum(1, 2, 3, array, 6)

      val list = listOf(9, 10, 11)
      sum(*list.toIntArray()) eq 30  // [2]
    }
  learner_created: false
- name: src/TwoFunctionsWithVarargs.kt
  visible: true
  text: |-
    // Varargs/TwoFunctionsWithVarargs.kt
    package varargs
    import atomictest.eq

    fun first(vararg numbers: Int): String {
      var result = ""
      for (i in numbers) {
        result += "[$i]"
      }
      return result
    }

    fun second(vararg numbers: Int) =
      first(*numbers)

    fun main() {
      second(7, 9, 32) eq "[7][9][32]"
    }
  learner_created: false
- name: src/MainArgs.kt
  visible: true
  text: |-
    // Varargs/MainArgs.kt

    fun main(args: Array<String>) {
      for (a in args) {
        println(a)
      }
    }
  learner_created: false
- name: src/MainArgConversion.kt
  visible: true
  text: |-
    // Varargs/MainArgConversion.kt

    fun main(args: Array<String>) {
      if (args.size < 3) return
      val first = args[0]
      val second = args[1].toInt()
      val third = args[2].toFloat()
      println("$first  $second  $third")
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
