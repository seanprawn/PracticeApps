type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 94
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 94
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val set = mutableSetOf<Int>()
        var count = 0
        do {
          count++
          set += Random.nextInt(25) + 1
        } while (set.size < 25)
        return count
  text: |-
    // Sets/Task2.kt
    package setsExercise2
    import kotlin.random.Random

    fun experiment(): Int {
      TODO()
    }

    fun main() {
      val counts = mutableListOf<Int>()
      repeat(1000) {
        counts += experiment()
      }
      println(counts.average())
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package setsExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.runAndGetSystemOutput

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSetsExercise2 {
      @Test(timeout = TIMEOUT)
      fun test1Experiment() {
        Assert.assertTrue("The 'experiment' function should return a positive number", experiment() > 0)
      }

      @Test(timeout = TIMEOUT)
      fun test2Main() {
        val output = runAndGetSystemOutput {
          main()
        }.trim()
        val value = output.toDoubleOrNull()
        Assert.assertTrue("The 'main' function should print an double value. Was: $output", value != null)
        Assert.assertTrue("Expected the average result of the experiment", value!! in 80.0..110.0)
      }
    }
  learner_created: false
status: Unchecked
record: -1
