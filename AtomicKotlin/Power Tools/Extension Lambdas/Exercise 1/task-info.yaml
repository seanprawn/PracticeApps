type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 167
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 167
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val sb = StringBuilder()
        sb.build()
        return sb.toString()
  - offset: 245
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 245
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val list = ArrayList<T>()
        list.build()
        return list
  - offset: 328
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 328
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val map = HashMap<K, V>()
        map.build()
        return map
  text: |-
    // ExtensionLambdas/ExtensionLambdasSoln1.kt
    package extensionLambdasExercise1
    import atomictest.eq

    fun createString(
      build: StringBuilder.() -> Unit
    ): String {
      TODO()
    }

    fun <T> createList(
      build: ArrayList<T>.() -> Unit
    ): List<T> {
      TODO()
    }

    fun <K, V> createMap(
      build: HashMap<K, V>.() -> Unit
    ): Map<K, V> {
      TODO()
    }

    @OptIn(ExperimentalStdlibApi::class)
    fun main() {
      createString {
        (1..10).forEach { append(it) }
      } eq buildString {
        (1..10).forEach { append(it) }
      }
      createList<String> {
        (1..10).forEach { add(it.toString()) }
      } eq buildList {
        (1..10).forEach { add(it.toString()) }
      }
      createMap<Char, Int> {
        ('a'..'j').forEachIndexed { n, c ->
          put(c, n)
        }
      } eq buildMap {
        ('a'..'j').forEachIndexed { n, c ->
          put(c, n)
        }
      }
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package extensionLambdasExercise1

    import org.junit.Test
    import util.unimplementedTest

    class TestExtensionLambdasExercise1 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
