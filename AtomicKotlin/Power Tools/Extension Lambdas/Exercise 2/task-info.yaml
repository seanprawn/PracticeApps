type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 119
    length: 38
    placeholder_text: |-
      fun sandwich2(): Sandwich {
        TODO()
      }
    initial_state:
      length: 38
      offset: 119
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fun sandwich2(
        prepare: Sandwich.() -> Unit = { this },
        fillings: Sandwich.() -> Unit
      ): Sandwich {
        val sandwich = Sandwich()
        sandwich.prepare()
        sandwich.fillings()
        return sandwich
      }
  - offset: 159
    length: 38
    placeholder_text: |-
      fun sandwich3(): Sandwich {
        TODO()
      }
    initial_state:
      length: 38
      offset: 159
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fun Sandwich.sandwich3(
        fillings: Sandwich.() -> Unit
      ): Sandwich {
        fillings()
        return this
      }
  - offset: 199
    length: 539
    placeholder_text: |-
      /*
      val PBJ1 = sandwich2 {
        add(PeanutButter())
        add(GrapeJelly())
      }

      val PBJ2 = sandwich2({ toast() }) {
        add(PeanutButter())
        add(GrapeJelly())
      }

      val PBJ3 = Sandwich().toast().sandwich3 {
        add(PeanutButter())
        add(GrapeJelly())
      }

      val PBJ4 = Sandwich().toast().sandwich3 {
        add(PeanutButter())
        add(GrapeJelly())
      }.grill()

      fun main() {
        PBJ1 eq "[PeanutButter, GrapeJelly]"
        PBJ2 eq "[Toast, PeanutButter, GrapeJelly]"
        PBJ3 eq "[Toast, PeanutButter, GrapeJelly]"
        PBJ4 eq
          "[Toast, PeanutButter, GrapeJelly, Grill]"
      }
      */
    initial_state:
      length: 539
      offset: 199
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val PBJ1 = sandwich2 {
        add(PeanutButter())
        add(GrapeJelly())
      }

      val PBJ2 = sandwich2({ toast() }) {
        add(PeanutButter())
        add(GrapeJelly())
      }

      val PBJ3 = Sandwich().toast().sandwich3 {
        add(PeanutButter())
        add(GrapeJelly())
      }

      val PBJ4 = Sandwich().toast().sandwich3 {
        add(PeanutButter())
        add(GrapeJelly())
      }.grill()

      fun main() {
        PBJ1 eq "[PeanutButter, GrapeJelly]"
        PBJ2 eq "[Toast, PeanutButter, GrapeJelly]"
        PBJ3 eq "[Toast, PeanutButter, GrapeJelly]"
        PBJ4 eq
          "[Toast, PeanutButter, GrapeJelly, Grill]"
      }
  text: |-
    // ExtensionLambdas/ExtensionLambdasSoln2.kt
    package extensionLambdasExercise2
    import sandwich.*
    import atomictest.eq

    fun sandwich2(): Sandwich {
      TODO()
    }

    fun sandwich3(): Sandwich {
      TODO()
    }

    /*
    val PBJ1 = sandwich2 {
      add(PeanutButter())
      add(GrapeJelly())
    }

    val PBJ2 = sandwich2({ toast() }) {
      add(PeanutButter())
      add(GrapeJelly())
    }

    val PBJ3 = Sandwich().toast().sandwich3 {
      add(PeanutButter())
      add(GrapeJelly())
    }

    val PBJ4 = Sandwich().toast().sandwich3 {
      add(PeanutButter())
      add(GrapeJelly())
    }.grill()

    fun main() {
      PBJ1 eq "[PeanutButter, GrapeJelly]"
      PBJ2 eq "[Toast, PeanutButter, GrapeJelly]"
      PBJ3 eq "[Toast, PeanutButter, GrapeJelly]"
      PBJ4 eq
        "[Toast, PeanutButter, GrapeJelly, Grill]"
    }
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package extensionLambdasExercise2

    import org.junit.Test
    import util.unimplementedTest

    class TestExtensionLambdasExercise2 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
