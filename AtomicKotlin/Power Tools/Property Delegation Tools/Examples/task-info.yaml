type: theory
files:
- name: src/CarService.kt
  visible: true
  text: |-
    // DelegationTools/CarService.kt
    package propertydelegation
    import atomictest.eq

    class Driver(
      map: MutableMap<String, Any?>
    ) {
      var name: String by map
      var age: Int by map
      var id: String by map
      var available: Boolean by map
      var coord: Pair<Double, Double> by map
    }

    fun main() {
      val info = mutableMapOf<String, Any?>(
        "name" to "Bruno Fiat",
        "age" to 22,
        "id" to "X97C111",
        "available" to false,
        "coord" to Pair(111.93, 1231.12)
      )
      val driver = Driver(info)
      driver.available eq false
      driver.available = true
      info eq "{name=Bruno Fiat, age=22, " +
        "id=X97C111, available=true, " +
        "coord=(111.93, 1231.12)}"
    }
  learner_created: false
- name: src/MapAccessors.kt
  visible: true
  text: |-
    // DelegationTools/MapAccessors.kt
    package delegationtools
    import kotlin.reflect.KProperty

    operator fun MutableMap<String, Any>.getValue(
      thisRef: Any?, property: KProperty<*>
    ): Any? {
      return this[property.name]
    }

    operator fun MutableMap<String, Any>.setValue(
      thisRef: Any?, property: KProperty<*>,
      value: Any
    ) {
      this[property.name] = value
    }
  learner_created: false
- name: src/Team.kt
  visible: true
  text: |-
    // DelegationTools/Team.kt
    package delegationtools
    import kotlin.properties.Delegates.observable
    import atomictest.eq

    class Team {
      var msg = ""
      var captain: String by observable("<0>") {
        prop, old, new ->
          msg += "${prop.name} $old to $new "
      }
    }

    fun main() {
      val team = Team()
      team.captain = "Adam"
      team.captain = "Amanda"
      team.msg eq "captain <0> to Adam " +
        "captain Adam to Amanda"
    }
  learner_created: false
- name: src/TeamWithTraditions.kt
  visible: true
  text: |-
    // DelegationTools/TeamWithTraditions.kt
    package delegationtools
    import atomictest.*
    import kotlin.properties.Delegates
    import kotlin.reflect.KProperty

    fun aName(
      property: KProperty<*>,
      old: String,
      new: String
    ) = if (new.startsWith("A")) {
      trace("$old -> $new")
      true
    } else {
      trace("Name must start with 'A'")
      false
    }

    interface Captain {
      var captain: String
    }

    class TeamWithTraditions : Captain {
      override var captain: String
        by Delegates.vetoable("Adam", ::aName)
    }

    class TeamWithTraditions2 : Captain {
      override var captain: String
        by Delegates.vetoable("Adam") {
          _, old, new ->
            if (new.startsWith("A")) {
              trace("$old -> $new")
              true
            } else {
              trace("Name must start with 'A'")
              false
            }
        }
    }

    fun main() {
      listOf(
        TeamWithTraditions(),
        TeamWithTraditions2()
      ).forEach {
        it.captain = "Amanda"
        it.captain = "Bill"
        it.captain eq "Amanda"
      }
      trace eq """
        Adam -> Amanda
        Name must start with 'A'
        Adam -> Amanda
        Name must start with 'A'
      """
    }
  learner_created: false
- name: src/NeverNull.kt
  visible: true
  text: |-
    // DelegationTools/NeverNull.kt
    package delegationtools
    import atomictest.*
    import kotlin.properties.Delegates

    class NeverNull {
      var nn: Int by Delegates.notNull()
    }

    fun main() {
      val non = NeverNull()
      capture {
        non.nn
      } eq "IllegalStateException: Property " +
        "nn should be initialized before get."
      non.nn = 11
      non.nn eq 11
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
