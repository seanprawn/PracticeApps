type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 96
    length: 121
    placeholder_text: |-
      class Outer {
        val s1: String = "TODO"
        val s2: String = "TODO"
        inner class Inner {
          val si: String = "TODO"
        }
      }
    initial_state:
      length: 121
      offset: 96
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Outer {
        init {
          trace("Outer constructor")
        }
        val s1: String by lazy {
          trace("Initializing Outer.s1")
          "Hi"
        }
        val s2: String by lazy {
          trace("Initializing Outer.s2")
          "Hello $s1"
        }
        inner class Inner {
          init {
            trace("Inner constructor")
          }
          val si: String by lazy {
            trace("Initializing Inner.si")
            "Howdy $s2"
          }
        }
      }
  text: |-
    // LazyInitialization/LazyInitSoln2.kt
    package lazyInitializationExercise2
    import atomictest.*

    class Outer {
      val s1: String = "TODO"
      val s2: String = "TODO"
      inner class Inner {
        val si: String = "TODO"
      }
    }

    fun main() {
      val o = Outer()
      trace("Outer created")
      val inner = o.Inner()
      trace("Inner created")
      trace("First access: inner.si:")
      trace(inner.si)
      trace("Second access: inner.si:")
      trace(inner.si)
      trace eq """
        Outer constructor
        Outer created
        Inner constructor
        Inner created
        First access: inner.si:
        Initializing Inner.si
        Initializing Outer.s2
        Initializing Outer.s1
        Howdy Hello Hi
        Second access: inner.si:
        Howdy Hello Hi
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package lazyInitializationExercise2

    import org.junit.Test
    import util.unimplementedTest

    class TestLazyInitializationExercise2 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
