type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 615
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 615
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: show(Properties::never)
  text: |-
    // LazyInitialization/LazyInitSoln1.kt
    package lazyInitializationExercise1
    import atomictest.*
    import kotlin.reflect.KProperty1

    fun compute(i: Int): Int {
      trace("Compute $i")
      return i
    }

    class Properties {
      val atDefinition = compute(1)
      val getter
        get() = compute(2)
      val lazyInit by lazy { compute(3) }
      val never by lazy { compute(4) }
    }

    fun main() {
      val p = Properties()
      fun show(prop: KProperty1<Properties, *>) {
        trace("${prop.name}:")
        trace("${prop.get(p)}")
        trace("${prop.get(p)}")
      }
      show(Properties::atDefinition)
      show(Properties::getter)
      show(Properties::lazyInit)
      // TODO
      trace eq """
        Compute 1
        atDefinition:
        1
        1
        getter:
        Compute 2
        2
        Compute 2
        2
        lazyInit:
        Compute 3
        3
        3
        never:
        Compute 4
        4
        4
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package lazyInitializationExercise1

    import org.junit.Test
    import util.unimplementedTest

    class TestLazyInitializationExercise1 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
