type: theory
files:
- name: src/LazySyntax.kt
  visible: true
  text: |-
    // LazyInitialization/LazySyntax.kt
    package lazyinitialization
    import atomictest.*

    val idle: String by lazy {
      trace("Initializing 'idle'")
      "I'm never used"
    }

    val helpful: String by lazy {
      trace("Initializing 'helpful'")
      "I'm helping!"
    }

    fun main() {
      trace(helpful)
      trace eq """
        Initializing 'helpful'
        I'm helping!
      """
    }
  learner_created: false
- name: src/LazyInt.kt
  visible: true
  text: |-
    // LazyInitialization/LazyInt.kt
    package lazyinitialization
    import atomictest.*

    class LazyInt(val init: () -> Int) {
      private var helper: Int? = null
      val value: Int
        get() {
          if (helper == null)
            helper = init()
          return helper!!
        }
    }

    fun main() {
      val later = LazyInt {
        trace("Initializing 'later'")
        5
      }
      trace("First 'value' access:")
      trace(later.value)
      trace("Second 'value' access:")
      trace(later.value)
      trace eq """
        First 'value' access:
        Initializing 'later'
        5
        Second 'value' access:
        5
      """
    }
  learner_created: false
- name: src/PropertyOptions.kt
  visible: true
  text: |-
    // LazyInitialization/PropertyOptions.kt
    package lazyinitialization
    import atomictest.trace

    fun compute(i: Int): Int {
      trace("Compute $i")
      return i
    }

    object Properties {
      val atDefinition = compute(1)
      val getter
        get() = compute(2)
      val lazyInit by lazy { compute(3) }
      val never by lazy { compute(4) }
    }

    fun main() {
      listOf(
        Properties::atDefinition,
        Properties::getter,
        Properties::lazyInit
      ).forEach {
        trace("${it.name}:")
        trace("${it.get()}")
        trace("${it.get()}")
      }
      trace eq """
        Compute 1
        atDefinition:
        1
        1
        getter:
        Compute 2
        2
        Compute 2
        2
        lazyInit:
        Compute 3
        3
        3
      """
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
