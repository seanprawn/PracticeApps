type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 104
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 104
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: if (first > second) first else second
  text: |-
    // IfExpressions/Task3.kt
    package ifExpressionsExercise3

    fun findMax(first: Int, second: Int): Int =
      TODO()

    fun main() {
      println(findMax(-1, 4))  // 4
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package ifExpressionsExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestIfExpressionsExercise3 {
      private fun checkFunction(first: Int, second: Int) {
        val max = if (first > second) first else second
        Assert.assertEquals("findMax($first, $second) should return $max",
          max, findMax(first, second))
      }

      @Test(timeout = TIMEOUT)
      fun testMax1() = checkFunction(1, 2)

      @Test(timeout = TIMEOUT)
      fun testMax2() = checkFunction(-1001, 22)

      @Test(timeout = TIMEOUT)
      fun testMax3() = checkFunction(-3, -3)
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Programming+Basics+%2F+if+Expressions+%2F+Exercise3
status: Unchecked
record: -1
