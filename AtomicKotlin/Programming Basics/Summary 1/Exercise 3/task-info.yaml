type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 114
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 114
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: b && c
  - offset: 126
    length: 5
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 126
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: "false"
  - offset: 200
    length: 4
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 201
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: "true"
  - offset: 210
    length: 4
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 213
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: b || c
  text: |-
    // Summary1/Task3.kt
    package summaryIExercise3

    fun first(a: Boolean, b: Boolean, c: Boolean): Boolean =
      if (a) TODO() else TODO()

    fun second(a: Boolean, b: Boolean, c: Boolean): Boolean =
      if (a) TODO() else TODO()

    fun main() {
      println(first(true, true, true))
      println(first(true, false, true))

      println(second(false, false, false))
      println(second(false, true, false))
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package summaryIExercise3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSummaryIExercise3 {
      private fun testFirst(a: Boolean, b: Boolean, c: Boolean) {
        Assert.assertEquals("Wrong result for 'first($a, $b, $c)'",
          first(a, b, c), a && b && c)
      }

      private fun testSecond(a: Boolean, b: Boolean, c: Boolean) {
        Assert.assertEquals("Wrong result for 'second($a, $b, $c)'",
          second(a, b, c), a || b || c)
      }

      @Test(timeout = TIMEOUT)
      fun test1() {
        testFirst(true, true, true)
        testFirst(true, true, false)
        testFirst(true, false, true)
        testFirst(false, true, true)
        testFirst(false, false, true)
        testFirst(false, true, false)
        testFirst(true, false, false)
        testFirst(false, false, false)
      }

      @Test(timeout = TIMEOUT)
      fun test2() {
        testSecond(true, true, true)
        testSecond(true, true, false)
        testSecond(true, false, true)
        testSecond(false, true, true)
        testSecond(false, false, true)
        testSecond(false, true, false)
        testSecond(true, false, false)
        testSecond(false, false, false)
      }
    }
  learner_created: false
status: Solved
record: -1
