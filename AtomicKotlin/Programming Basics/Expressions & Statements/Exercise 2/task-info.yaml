type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 77
    length: 11
    placeholder_text: fun f() = 0
    initial_state:
      length: 11
      offset: 77
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'fun f(i: Int, j: Int) = i + j'
  - offset: 90
    length: 12
    placeholder_text: fun g() = ""
    initial_state:
      length: 12
      offset: 90
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'fun g(s1: String, s2: String) = s1 + s2'
  - offset: 104
    length: 13
    placeholder_text: fun h() = '?'
    initial_state:
      length: 13
      offset: 104
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: fun h() = println("h()")
  - offset: 134
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 134
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      val fVal: Int = f(1, 2)
        val gVal: String = g("a", "bc")
        val hVal: Unit = h()
        println("Int")
        println("String")
        println("Unit")
  text: |-
    // ExpressionsStatements/Task2.kt
    package expressionsAndStatementsExercise2

    fun f() = 0

    fun g() = ""

    fun h() = '?'

    fun main() {
      TODO()}
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package expressionsAndStatementsExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestExpressionsAndStatementsExercise2 {

      @Test(timeout = TIMEOUT)
      fun test1f() {
        val fFunc = ::f
        checkParametersOfTopLevelFunction(fFunc, listOf("" to "kotlin.Int", "" to "kotlin.Int"))
        Assert.assertEquals("Wrong result for 'f(1, 2)' call", 3, fFunc.call(1, 2))
      }

      @Test(timeout = TIMEOUT)
      fun test2g() {
        val gFunc = ::g
        checkParametersOfTopLevelFunction(gFunc, listOf("" to "kotlin.String", "" to "kotlin.String"))
        Assert.assertEquals("""Wrong result for 'g("a", "bc")' call""", "abc", gFunc.call("a", "bc"))
      }

      @Test(timeout = TIMEOUT)
      fun test3h() {
        val hFunc = ::h
        checkParametersOfTopLevelFunction(hFunc, listOf())
        runAndCheckSystemOutput("Wrong output after calling 'h()'", "h()") {
          hFunc.call()
        }
      }

      @Test(timeout = TIMEOUT)
      fun test4Main() {
        checkMainIsImplemented(::main)
        val output = runAndGetSystemOutput(::main)
        Assert.assertTrue("main() should call 'h()'", "h()" in output)
        fun checkType(type: String, func: String) {
          Assert.assertTrue("The return type of '$func()' is '$type'; " +
            "'$type' should be printed to the console", type in output)
        }
        checkType("Int", "f")
        checkType("String", "g")
        checkType("Unit", "h")
      }
    }
  learner_created: false
status: Unchecked
record: -1
