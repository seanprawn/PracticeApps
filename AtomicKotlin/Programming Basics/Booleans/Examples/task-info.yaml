type: theory
files:
- name: src/Open1.kt
  visible: true
  text: |-
    // Booleans/Open1.kt

    fun isOpen1(hour: Int) {
      val open = 9
      val closed = 20
      println("Operating hours: $open - $closed")
      val status =
        if (hour >= open && hour <= closed) // [1]
          true
        else
          false
      println("Open: $status")
    }

    fun main() = isOpen1(6)
    /* Output:
    Operating hours: 9 - 20
    Open: false
    */
  learner_created: false
- name: src/Open2.kt
  visible: true
  text: |-
    // Booleans/Open2.kt

    fun isOpen2(hour: Int) {
      val open = 9
      val closed = 20
      println("Operating hours: $open - $closed")
      val status = hour >= open && hour <= closed
      println("Open: $status")
    }

    fun main() = isOpen2(6)
    /* Output:
    Operating hours: 9 - 20
    Open: false
    */
  learner_created: false
- name: src/Closed.kt
  visible: true
  text: |-
    // Booleans/Closed.kt

    fun isClosed(hour: Int) {
      val open = 9
      val closed = 20
      println("Operating hours: $open - $closed")
      val status = hour < open || hour > closed
      println("Closed: $status")
    }

    fun main() = isClosed(6)
    /* Output:
    Operating hours: 9 - 20
    Closed: true
    */
  learner_created: false
- name: src/EvaluationOrder.kt
  visible: true
  text: |-
    // Booleans/EvaluationOrder.kt

    fun main() {
      val sunny = true
      val hoursSleep = 6
      val exercise = false
      val temp = 55

      // [1]:
      val happy1 = sunny && temp > 50 ||
        exercise && hoursSleep > 7
      println(happy1)

      // [2]:
      val sameHappy1 = (sunny && temp > 50) ||
        (exercise && hoursSleep > 7)
      println(sameHappy1)

      // [3]:
      val notSame =
        (sunny && temp > 50 || exercise) &&
          hoursSleep > 7
      println(notSame)
    }
    /* Output:
    true
    true
    false
    */
  learner_created: false
status: Solved
record: -1
post_submission_on_open: true
