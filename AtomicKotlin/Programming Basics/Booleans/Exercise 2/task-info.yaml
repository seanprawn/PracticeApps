type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 48
    length: 16
    placeholder_text: fun showAnd() {}
    initial_state:
      length: 16
      offset: 48
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fun showAnd(first: Boolean, second: Boolean) {
        println("$first && $second == ${first && second}")
      }
  - offset: 66
    length: 15
    placeholder_text: fun showOr() {}
    initial_state:
      length: 15
      offset: 66
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fun showOr(first: Boolean, second: Boolean) {
        println("$first || $second == ${first || second}")
      }
  - offset: 108
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 108
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      showAnd(true, true)
        showAnd(true, false)
        showAnd(false, true)
        showAnd(false, false)

        showOr(true, true)
        showOr(true, false)
        showOr(false, true)
        showOr(false, false)
  text: |-
    // Booleans/Task2.kt
    package booleansExercise2

    fun showAnd() {}

    fun showOr() {}

    fun showTruthTable() {
      TODO()
    }

    fun main() {
      showTruthTable()
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package booleansExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.checkParametersOfTopLevelFunction
    import util.runAndCheckSystemOutput
    import util.runAndGetSystemOutput
    import kotlin.reflect.KFunction

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBooleansExercise2 {
      // TODO: test output for different errors
      @Test(timeout = TIMEOUT)
      fun test1ShowFunctions() {
        testShowAnd(true, true)
        testShowAnd(true, false)
        testShowAnd(false, true)
        testShowAnd(false, false)

        testShowOr(true, true)
        testShowOr(true, false)
        testShowOr(false, true)
        testShowOr(false, false)
      }

      private fun testShowAnd(first: Boolean, second: Boolean) {
        testShowFunc(::showAnd, "$first && $second == ${first && second}", first, second)
      }

      private fun testShowOr(first: Boolean, second: Boolean) {
        testShowFunc(::showOr, "$first || $second == ${first || second}", first, second)
      }

      private fun testShowFunc(
        showFunc: KFunction<*>,
        expectedOutput: String,
        first: Boolean,
        second: Boolean
      ) {
        checkParametersOfTopLevelFunction(showFunc, listOf("first" to "kotlin.Boolean", "second" to "kotlin.Boolean"))
        runAndCheckSystemOutput("Wrong output for '${showFunc.name}($first, $second)'",
          expectedOutput) {
          showFunc.call(first, second)
        }
      }

      @Test(timeout = TIMEOUT)
      fun test2Table() {
        val table = runAndGetSystemOutput { showTruthTable() }
        val expectedLines = """
          true && true == true
          true && false == false
          false && true == false
          false && false == false
          true || true == true
          true || false == true
          false || true == true
          false || false == false
        """.trimIndent().lines()
        expectedLines.forEach {
          Assert.assertTrue("""Not found the line "$it" in the table""",
            it in table)
        }
      }
    }
  learner_created: false
status: Unchecked
record: -1
