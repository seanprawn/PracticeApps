type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 156
    length: 25
    placeholder_text: // TODO exception classes
    initial_state:
      length: 25
      offset: 156
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      open class HamsterCageException(
        val msg: String
      ): Exception() {
        override fun toString() =
          "HamsterCageException: $msg"
      }

      class CageFullException(val limit: Int) :
        HamsterCageException("Cage full > $limit")

      class NoSuchHamsterException(val id: String) :
        HamsterCageException("No Hamster $id")

      class OutOfWaterException :
        HamsterCageException("Cage out of water")
  - offset: 296
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 296
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      fun add(h: Hamster) {
          if (cage.size >= capacity)
            throw CageFullException(capacity)
          cage.add(h)
        }
        fun get(name: String): Hamster =
          cage.find { it.name == name } ?:
          throw NoSuchHamsterException(name)
        fun feed(): String {
          if ((0..10).random(rand) > 8)
            throw OutOfWaterException()
          return "Feeding complete"
        }
  - offset: 475
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 475
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      try {
          hamsters.forEach {
            trace("$it")
            hc.add(it)
          }
        } catch (e: CageFullException) {
          trace("$e")
        }
        try {
          trace("${hc.get(hamsters[0].name)}")
          trace("${hc.get("Morty")}")
        } catch (e: NoSuchHamsterException) {
          trace("$e")
        }
        try {
          repeat(3) { trace(hc.feed()) }
        } catch (e: OutOfWaterException) {
          trace("$e")
        }
  text: |-
    // ExceptionHandling/Task1.kt
    package exceptionHandlingExercise1
    import atomictest.trace
    import kotlin.random.Random

    data class Hamster(val name: String)

    // TODO exception classes

    class HamsterCage(val capacity: Int) {
      private val rand = Random(47)
      private val cage = HashSet<Hamster>()
      // TODO
    }

    val hamsters = listOf(
      Hamster("Sally"), Hamster("Ralph"),
      Hamster("Bob"), Hamster("Sergio"),
      Hamster("Allison"), Hamster("Jane"))

    fun test(hc: HamsterCage) {
      // TODO
    }

    fun main() {
      test(HamsterCage(3))
      trace eq """
        Hamster(name=Sally)
        Hamster(name=Ralph)
        Hamster(name=Bob)
        Hamster(name=Sergio)
        HamsterCageException: Cage full > 3
        Hamster(name=Sally)
        HamsterCageException: No Hamster Morty
        Feeding complete
        HamsterCageException: Cage out of water
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package exceptionHandlingExercise1

    import org.junit.Test
    import util.unimplementedTest

    class TestExceptionHandlingExercise1 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
