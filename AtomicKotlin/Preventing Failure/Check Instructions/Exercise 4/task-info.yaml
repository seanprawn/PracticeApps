type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 103
    length: 10
    placeholder_text: class Tank
    initial_state:
      length: 10
      offset: 103
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Tank(val capacity: Double) {
        val safetyGap = 0.02 * capacity // 2%
        var level: Double = 0.0
          private set
        val maxLevel = capacity - safetyGap
        fun add(quantity: Double): Double {
          require(quantity > 0.0) {
            "quantity must be > 0, is $quantity"
          }
          var remainder = 0.0
          val total = level + quantity
          if (total >= maxLevel) {
            remainder = total - maxLevel
            level = maxLevel
          } else {
            level += quantity
          }
          check(level >= 0.0) {
            "Incorrect level: $level"
          }
          check(level <= maxLevel) {
            "Safety Gap exceeded: $level"
          }
          check(remainder >= 0.0) {
            "Remainder is negative: $remainder"
          }
          return remainder
        }
        fun drain(quantity: Double) {
          require(quantity > 0.0) {
            "quantity must be > 0, is $quantity"
          }
          require(quantity <= level) {
            "drain exceeds tank amount: $quantity"
          }
          level -= quantity
          check(level >= 0.0) {
            "Incorrect level: $level"
          }
        }
      }
  - offset: 128
    length: 428
    placeholder_text: |-
      /*
        val tank = Tank(100.0)
        tank.add(100.0) eq 2.0
        tank.level eq 98.0
        tank.drain(98.0)
        tank.level eq 0.0
        capture { tank.add(-1.0) } eq
          "IllegalArgumentException: " +
          "quantity must be > 0, is -1.0"
        capture { tank.drain(-7.0) } eq
          "IllegalArgumentException: " +
          "quantity must be > 0, is -7.0"
        capture { tank.drain(1.0) } eq
          "IllegalArgumentException: " +
          "drain exceeds tank amount: 1.0"
      */
    initial_state:
      length: 428
      offset: 128
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val tank = Tank(100.0)
        tank.add(100.0) eq 2.0
        tank.level eq 98.0
        tank.drain(98.0)
        tank.level eq 0.0
        capture { tank.add(-1.0) } eq
          "IllegalArgumentException: " +
          "quantity must be > 0, is -1.0"
        capture { tank.drain(-7.0) } eq
          "IllegalArgumentException: " +
          "quantity must be > 0, is -7.0"
        capture { tank.drain(1.0) } eq
          "IllegalArgumentException: " +
          "drain exceeds tank amount: 1.0"
  text: |-
    // CheckInstructions/CheckInstructionsSoln4.kt
    package checkInstructionsExercise4
    import atomictest.*

    class Tank

    fun main() {
    /*
      val tank = Tank(100.0)
      tank.add(100.0) eq 2.0
      tank.level eq 98.0
      tank.drain(98.0)
      tank.level eq 0.0
      capture { tank.add(-1.0) } eq
        "IllegalArgumentException: " +
        "quantity must be > 0, is -1.0"
      capture { tank.drain(-7.0) } eq
        "IllegalArgumentException: " +
        "quantity must be > 0, is -7.0"
      capture { tank.drain(1.0) } eq
        "IllegalArgumentException: " +
        "drain exceeds tank amount: 1.0"
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package checkInstructionsExercise4

    import org.junit.Test
    import util.unimplementedTest

    class TestCheckInstructionsExercise4 {
      @Test fun testSolution() {
        unimplementedTest()
      }
    }
  learner_created: false
status: Unchecked
record: -1
