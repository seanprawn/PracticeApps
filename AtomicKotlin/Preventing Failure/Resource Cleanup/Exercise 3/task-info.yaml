type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 327
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 327
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      Cleanup().use {
          it.f()
          when(opt) {
            Option.Normal -> it.g()
            Option.Return -> return
            Option.Throw -> throw Exception()
          }
          it.h()
        }
  text: |-
    // ResourceCleanup/ResourceCleanupSoln3.kt
    package resourceCleanupExercise3
    import atomictest.*

    class Cleanup : AutoCloseable {
      fun f() = trace("f()")
      fun g() = trace("g()")
      fun h() = trace("h()")
      override fun close() = trace("close()")
    }

    enum class Option { Normal, Return, Throw }

    fun verifyClose(opt: Option) {
      TODO()
    }

    fun main() {
      verifyClose(Option.Normal)
      verifyClose(Option.Return)
      capture {
        verifyClose(Option.Throw)
      } eq "Exception"
      trace eq """
        f()
        g()
        h()
        close()
        f()
        close()
        f()
        close()
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package resourceCleanupExercise3

    import org.junit.Test
    import util.unimplementedTest

    class TestResourceCleanupExercise3 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
