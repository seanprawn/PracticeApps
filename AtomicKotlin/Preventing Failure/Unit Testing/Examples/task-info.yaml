type: theory
files:
- name: src/NoFramework.kt
  visible: true
  text: |-
    // UnitTesting/NoFramework.kt
    package unittesting
    import kotlin.test.assertEquals
    import kotlin.test.assertTrue
    import atomictest.*

    fun fortyTwo() = 42

    fun testFortyTwo(n: Int = 42) {
      assertEquals(
        expected = n,
        actual = fortyTwo(),
        message = "Incorrect,")
    }

    fun allGood(b: Boolean = true) = b

    fun testAllGood(b: Boolean = true) {
      assertTrue(allGood(b), "Not good")
    }

    fun main() {
      testFortyTwo()
      testAllGood()
      capture {
        testFortyTwo(43)
      } contains
        listOf("expected:", "<43>",
          "but was", "<42>")
      capture {
        testAllGood(false)
      } contains listOf("Error", "Not good")
    }
  learner_created: false
- name: src/UsingExpect.kt
  visible: true
  text: |-
    // UnitTesting/UsingExpect.kt
    package unittesting
    import atomictest.*
    import kotlin.test.*

    fun testFortyTwo2(n: Int = 42) {
      expect(n, "Incorrect,") { fortyTwo() }
    }

    fun main() {
      testFortyTwo2()
      capture {
        testFortyTwo2(43)
      } contains
        listOf("expected:",
          "<43> but was:", "<42>")
      assertFails { testFortyTwo2(43) }
      capture {
        assertFails { testFortyTwo2() }
      } contains
        listOf("Expected an exception",
          "to be thrown",
          "but was completed successfully.")
      assertFailsWith<AssertionError> {
        testFortyTwo2(43)
      }
      capture {
        assertFailsWith<AssertionError> {
          testFortyTwo2()
        }
      } contains
        listOf("Expected an exception",
          "to be thrown",
          "but was completed successfully.")
    }
  learner_created: false
- name: src/SampleTest.kt
  visible: true
  text: |-
    // Tests/unittesting/SampleTest.kt
    package unittesting
    import kotlin.test.*

    class SampleTest {
      @Test
      fun testFortyTwo() {
        expect(42, "Incorrect,") { fortyTwo() }
      }
      @Test
      fun testAllGood() {
        assertTrue(allGood(), "Not good")
      }
    }
  learner_created: false
- name: src/StateMachine.kt
  visible: true
  text: |-
    // UnitTesting/StateMachine.kt
    package unittesting
    import unittesting.State.*

    enum class State { On, Off, Paused }

    class StateMachine {
      var state: State = Off
        private set
      private fun transition(
        new: State, current: State = On
      ) {
        if(new == Off && state != Off)
          state = Off
        else if(state == current)
          state = new
      }
      fun start() = transition(On, Off)
      fun pause() = transition(Paused, On)
      fun resume() = transition(On, Paused)
      fun finish() = transition(Off)
    }
  learner_created: false
- name: src/StateMachineTest.kt
  visible: true
  text: |-
    // Tests/unittesting/StateMachineTest.kt
    package unittesting
    import kotlin.test.*

    class StateMachineTest {
      val sm = StateMachine()
      @Test
      fun start() {
        sm.start()
        assertEquals(State.On, sm.state)
      }
      @Test
      fun `pause and resume`() {
        sm.start()
        sm.pause()
        assertEquals(State.Paused, sm.state)
        sm.resume()
        assertEquals(State.On, sm.state)
        sm.pause()
        assertEquals(State.Paused, sm.state)
      }
      // ...
    }
  learner_created: false
- name: src/Learner.kt
  visible: true
  text: |-
    // UnitTesting/Learner.kt
    package unittesting

    enum class Language {
      Kotlin, Java, Go, Python, Rust, Scala
    }

    data class Learner(
      val id: Int,
      val name: String,
      val surname: String,
      val language: Language
    )
  learner_created: false
- name: src/LearnerTest.kt
  visible: true
  text: |-
    // Tests/unittesting/LearnerTest.kt
    package unittesting
    import unittesting.Language.*
    import kotlin.test.*

    fun makeLearner(
      id: Int,
      language: Language = Kotlin,         // [1]
      name: String = "Test Name $id",
      surname: String = "Test Surname $id"
    ) = Learner(id, name, surname, language)

    class LearnerTest {
      @Test
      fun `single Learner`() {
        val learner = makeLearner(10, Java)
        assertEquals("Test Name 10", learner.name)
      }
      @Test
      fun `multiple Learners`() {
        val learners = (1..9).map(::makeLearner)
        assertTrue(
          learners.all { it.language == Kotlin })
      }
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
