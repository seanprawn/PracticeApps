type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 128
    length: 36
    placeholder_text: Any /* replace with required type */
    initial_state:
      length: 36
      offset: 128
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Triple<Boolean, Int, Int>
  - offset: 169
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 169
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      return if (n1 < 0 || n2 < 0) Triple(false, 0, 0)
        else Triple(true, n1 + n2, n1 * n2)
  - offset: 192
    length: 231
    placeholder_text: |-
      /*
          val result = calculate(5, 7)
          result.first eq true
          result.second eq 12
          result.third eq 35
          val (success, plus, multiply) =
                  calculate(11, 13)
          success eq true
          plus eq 24
          multiply eq 143
      */
    initial_state:
      length: 231
      offset: 192
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val result = calculate(5, 7)
        result.first eq true
        result.second eq 12
        result.third eq 35
        val (success, plus, multiply) =
          calculate(11, 13)
        success eq true
        plus eq 24
        multiply eq 143
  text: |-
    // Destructuring/Task1.kt
    package destructuringDeclarationsExercise1
    import atomictest.eq

    fun calculate(
      n1: Int, n2: Int
    ): Any /* replace with required type */ {
      TODO()
    }

    fun main() {
    /*
        val result = calculate(5, 7)
        result.first eq true
        result.second eq 12
        result.third eq 35
        val (success, plus, multiply) =
                calculate(11, 13)
        success eq true
        plus eq 24
        multiply eq 143
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package destructuringDeclarationsExercise1

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import kotlin.reflect.KTypeProjection
    import kotlin.reflect.full.createType
    import kotlin.reflect.typeOf
    import kotlin.test.assertEquals

    @OptIn(ExperimentalStdlibApi::class)
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestDestructuringDeclarationsExercise1 {
        companion object {
            private val KBoolean = typeOf<Boolean>()
            private val KInt = typeOf<Int>()
            private val ExpectedKTriple = typeOf<Triple<Boolean, Int, Int>>()
        }

        @Test
        fun `#1 signature`() {
            val actualFun = ::calculate
            assertEquals(
                    expected = ExpectedKTriple,
                    actual = actualFun.returnType,
                    message = "calculate() should return Triple"
            )
        }

        @Test
        fun `#2 destructuring`() {
            val calculateFun = ::calculate
            val triple = calculateFun.call(0, 0)
              as Triple<Boolean, Int, Int>
            val a = triple.first
            val b = triple.second
            val c = triple.third
            assertEquals(
                    expected = KBoolean,
                    actual = a::class.createType(),
                    message = "First destructured value should be Boolean"
            )
            assertEquals(
                    expected = KInt,
                    actual = b::class.createType(),
                    message = "Second destructured value should be Int"
            )
            assertEquals(
                    expected = KInt,
                    actual = c::class.createType(),
                    message = "Third destructured value should be Int"
            )
        }

        @Test
        fun `#3 solution`() {
            assert(5 to 7, Triple(true, 12, 35))
            assert(11 to 13, Triple(true, 24, 143))
            assert(0 to 100, Triple(true, 100, 0))
            assert(0 to 0, Triple(true, 0, 0))
            assert(0 to -100, Triple(false, 0, 0))
            assert(1 to -1, Triple(false, 0, 0))
            assert(-1 to -1, Triple(false, 0, 0))
            assert(-1 to -1, Triple(false, 0, 0))
        }

        private fun assert(input: Pair<Int, Int>, expectedOutput: Triple<Boolean, Int, Int>) {
            val (a, b) = input
            val calculateFun = ::calculate
            val actual: Any = calculateFun.call(a, b)
            assertEquals(
                    expected = expectedOutput,
                    actual = actual,
                    message = "Incorrect result for 'calculate($a, $b)"
            )
        }
    }
  learner_created: false
status: Unchecked
record: -1
