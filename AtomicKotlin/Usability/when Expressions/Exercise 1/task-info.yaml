type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 155
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 155
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      when (cloudPercent) {
          in 81..100 -> "Sunny"
          in 61..80 -> "Mostly Sunny"
          in 41..60 -> "Partly Sunny"
          in 21..40 -> "Mostly Cloudy"
          in 0..20 -> "Cloudy"
          else -> throw IllegalArgumentException(
            "Cloudiness value should be between 0 and 100")
        }
  text: |-
    // WhenExpressions/Task1.kt
    package whenExpressionsExercise1
    import atomictest.capture
    import atomictest.eq

    fun cloudiness(cloudPercent: Int): String =
      TODO()

    fun main() {
      cloudiness(100) eq "Sunny"
      cloudiness(70) eq "Mostly Sunny"
      cloudiness(50) eq "Partly Sunny"
      cloudiness(30) eq "Mostly Cloudy"
      cloudiness(0) eq "Cloudy"
      capture {
        cloudiness(1000)
      } eq "IllegalArgumentException: Cloudiness value should be between 0 and 100"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package whenExpressionsExercise1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestWhenExpressionsExercise1 {
      private fun expected(cloudiness: Int): String =
        when (cloudiness) {
          in 81..100 -> "Sunny"
          in 61..80 -> "Mostly Sunny"
          in 41..60 -> "Partly Sunny"
          in 21..40 -> "Mostly Cloudy"
          in 0..20 -> "Cloudy"
          else -> throw IllegalArgumentException(
            "Cloudiness value should be between 0 and 100")
        }

      @Test(timeout = TIMEOUT)
      fun test1CorrectValues() {
        for (cloudiness in 0..100) {
          Assert.assertEquals("Wrong result for cloudiness=$cloudiness:",
            expected(cloudiness), cloudiness(cloudiness))
        }
      }

      private fun testIncorrectValue(cloudiness: Int) {
        try {
          cloudiness(cloudiness)
          throw AssertionError("Expected an IllegalArgumentException for cloudiness=$cloudiness")
        } catch (exception: IllegalArgumentException) {
          Assert.assertEquals("Incorrect error message", "Cloudiness value should be between 0 and 100", exception.message)
        }
      }

      @Test(timeout = TIMEOUT)
      fun test2Incorrect() = testIncorrectValue(104)

      @Test(timeout = TIMEOUT)
      fun test3Incorrect() = testIncorrectValue(-3)
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Usability+%2F+when+Expressions+%2F+Exercise1
status: Unchecked
record: -1
