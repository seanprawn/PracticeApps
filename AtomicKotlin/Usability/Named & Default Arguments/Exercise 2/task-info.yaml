type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 112
    length: 2
    placeholder_text: ()
    initial_state:
      length: 2
      offset: 112
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      (
        val hours: Int = 0,
        val minutes: Int = 0,
        val seconds: Int = 0,
        val nanoseconds: Int = 0
      )
  - offset: 150
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 150
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: ((hours * 60 + minutes) * 60) + seconds
  - offset: 190
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 190
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: (toSecondOfDay() * 1000000000L) + nanoseconds
  text: |
    // NamedAndDefaultArgs/Task2.kt
    package namedAndDefaultArgumentsExercise2
    import atomictest.eq

    class SimpleTime() {
      fun toSecondOfDay(): Int =
        TODO()

      fun toNanoOfDay(): Long =
        TODO()
    }

    fun main() {
    /*
        val noon = SimpleTime(12)
        noon.toSecondOfDay() eq 12 * 60 * 60

        val nanosecond = SimpleTime(nanoseconds = 1)
        nanosecond.toNanoOfDay() eq 1

        val second = SimpleTime(seconds = 1)
        second.toNanoOfDay() eq 1000000000L

        val halfPastSeven = SimpleTime(hours = 6, minutes = 30)
        halfPastSeven.toNanoOfDay() eq (6 * 60 + 30) * 60 * 1000000000L
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package namedAndDefaultArgumentsExercise2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import java.time.LocalTime

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestNamedAndDefaultArgumentsExercise2 {
      private fun testSimpleTime(
        hours: Int,
        minutes: Int = 0,
        seconds: Int = 0,
        nanoseconds: Int = 0
      ) {
        val time = SimpleTime(hours, minutes, seconds, nanoseconds)

        val localTime = LocalTime.of(hours, minutes, seconds, nanoseconds)
        fun message(functionName: String) =
          "Wrong '$functionName' for SimpleTime(hours = $hours, " +
            "minutes = $minutes, seconds = $seconds, nanoseconds = $nanoseconds)"
        Assert.assertEquals(message("toSecondOfDay"), localTime.toSecondOfDay(), time.toSecondOfDay())
        Assert.assertEquals(message("toNanoOfDay"), localTime.toNanoOfDay(), time.toNanoOfDay())
      }

      @Test(timeout = TIMEOUT)
      fun test1Sample() = testSimpleTime(12)

      @Test(timeout = TIMEOUT)
      fun test2Sample() = testSimpleTime(6, 30)

      @Test(timeout = TIMEOUT)
      fun test3Sample() = testSimpleTime(0, 0, 1)

      @Test(timeout = TIMEOUT)
      fun test4Sample() = testSimpleTime(0, 0, 0, 1)

      @Test(timeout = TIMEOUT)
      fun test5() = testSimpleTime(2, 12, 27)

      @Test(timeout = TIMEOUT)
      fun test6() = testSimpleTime(1, 1, 1, 1)

      @Test(timeout = TIMEOUT)
      fun test7() = testSimpleTime(11, 59, 59, 999999999)

      @Test(timeout = TIMEOUT)
      fun test8() = testSimpleTime(5, 31)
    }

    fun SimpleTime(hours: Any?, minutes: Any?, seconds: Any?, nanoseconds: Any?): SimpleTime = TODO()
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Usability+%2F+Named+%26+Default+Arguments+%2F+Exercise1
status: Unchecked
record: -1
