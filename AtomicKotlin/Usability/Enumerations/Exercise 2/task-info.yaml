type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 375
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 375
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      when (this) {
        December, January, February -> Summer
        March, April, May -> Autumn
        June, July, August -> Winter
        September, October, November -> Spring
      }
  - offset: 435
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 435
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      when (this) {
        January, March, May, July,
        August, October, December -> 31

        April, June, September, November -> 30

        February -> if (leapYear) 29 else 28
      }
  text: |-
    // Enumerations/Task2.kt
    package enumerationsExercise2
    import atomictest.eq
    import enumerationsExercise2.Month.*
    import enumerationsExercise2.Season.*

    enum class Month {
      January, February, March, April,
      May, June, July, August,
      September, October, November, December
    }

    enum class Season {
      Winter, Spring, Summer, Autumn
    }

    fun Month.getAustralianSeason(): Season = TODO()

    fun Month.getDays(leapYear: Boolean = false): Int = TODO()

    fun main() {
      January.getAustralianSeason() eq Summer
      May.getAustralianSeason() eq Autumn

      January.getDays() eq 31
      February.getDays(leapYear = false) eq 28
      February.getDays(leapYear = true) eq 29
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package enumerationsExercise2

    import enumerationsExercise2.Month.*
    import enumerationsExercise2.Season.*
    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestEnumerationsExercise2 {
      private val seasons: Map<Month, Season> = mapOf(
        December to Summer, January to Summer, February to Summer,
        March to Autumn, April to Autumn, May to Autumn,
        June to Winter, July to Winter, August to Winter,
        September to Spring, October to Spring, November to Spring
      )

      @Test(timeout = TIMEOUT)
      fun test1Seasons() {
        for (month in Month.values()) {
          Assert.assertEquals("Wrong australian season for $month:", seasons[month], month.getAustralianSeason())
        }
      }

      private fun Month.expected(leapYear: Boolean = false): Int = when (this) {
        January, March, May, July,
        August, October, December -> 31

        April, June, September, November -> 30

        February -> if (leapYear) 29 else 28
      }

      @Test(timeout = TIMEOUT)
      fun test2Days() {
        for (month in Month.values()) {
          Assert.assertEquals("Wrong days for $month:", month.expected(false), month.getDays(false))
          Assert.assertEquals("Wrong days for $month in a leap year:", month.expected(true), month.getDays(true))
        }
      }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Usability+%2F+Enumerations+%2F+Exercise2
status: Unchecked
record: -1
