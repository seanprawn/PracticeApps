type: output
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 122
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 122
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      var sum = 0
        for (input in n) {
          val number = input.toIntOrNull()
          if (number == null) {
            trace("Not a number: $input")
          } else {
            sum += number
          }
          if (number == 0) break
        }
        trace("Sum: $sum")
  text: |-
    // BreakAndContinue/Task1.kt
    package breakAndContinueExercise1
    import atomictest.*

    fun readNumbers(vararg n: String) {
      TODO()
    }

    fun main() {
      readNumbers("1", "a", "3", "10", "0", "19")
      trace eq """
        Not a number: a
        Sum: 14
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package breakAndContinueExercise1

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.TIMEOUT
    import util.TestTrace
    import util.loadTraceContent
    import util.resetTraceContent
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBreakAndContinueExercise1 : TestTrace() {
      private fun testData(expectedOutput: List<String>, input: List<String>) {
        resetTraceContent()
        readNumbers(*input.toTypedArray())
        assertEquals(expectedOutput, loadTraceContent(),
          "Wrong result for:\n$input\n")
      }

      @Test(timeout = TIMEOUT)
      fun test1() = testData(listOf("Sum: 1"), listOf("1", "0"))

      @Test(timeout = TIMEOUT)
      fun test2() = testData(listOf("Not a number: af", "Sum: 1"), listOf("af", "1", "0"))

      @Test(timeout = TIMEOUT)
      fun test3() = testData(listOf("Sum: 15"), listOf("1", "9", "5", "0"))
    }
  learner_created: false
status: Unchecked
record: -1
