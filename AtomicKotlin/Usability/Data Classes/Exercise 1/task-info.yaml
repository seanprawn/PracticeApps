type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 54
    length: 32
    placeholder_text: // Implement AirlineTicket class
    initial_state:
      length: 32
      offset: 54
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      data class AirlineTicket(
        val firstName: String,
        val lastName: String,
        val ticket: Int,
        val origin: String,
        val destination: String
      )
  - offset: 101
    length: 96
    placeholder_text: |-
      /*
        val ticket = AirlineTicket("Bruce", "Eckel",
          123456, "DEN", "HND")
        println(ticket)
      */
    initial_state:
      length: 96
      offset: 101
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val ticket = AirlineTicket("Bruce", "Eckel",
          123456, "DEN", "HND")
        println(ticket)
  text: |-
    // DataClasses/Task1.kt
    package dataClassesExercise1

    // Implement AirlineTicket class

    fun main() {
    /*
      val ticket = AirlineTicket("Bruce", "Eckel",
        123456, "DEN", "HND")
      println(ticket)
    */
    }
    /* Expected output:
    AirlineTicket(firstName=Bruce, lastName=Eckel, ticket=123456, origin=DEN, destination=HND)
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package dataClassesExercise1

    import org.junit.Assert
    import org.junit.Test
    import util.*

    class TestDataClassesExercise1 {
      @Test(timeout = TIMEOUT)
      fun test() {
        val ticketClass = loadClass("dataClassesExercise1", "AirlineTicket")
            .apply {
              assertParametersOfFirstConstructor(
                  "firstName" to String::class,
                  "lastName" to String::class,
                  "ticket" to Int::class,
                  "origin" to String::class,
                  "destination" to String::class
              )
            }
        Assert.assertTrue("'AirlineTicket' class is expected to be defined as 'data' class", ticketClass.isData)
        runAndCheckSystemOutput("Wrong output",
          "AirlineTicket(firstName=Bruce, lastName=Eckel, ticket=123456, origin=DEN, destination=HND)") {
          val ticket = ticketClass.createInstance("Bruce", "Eckel", 123456, "DEN", "HND")
          println(ticket)
        }
      }
    }
  learner_created: false
status: Unchecked
record: -1
