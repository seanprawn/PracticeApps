type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 91
    length: 29
    placeholder_text: '// TODO: implement ''reversed'''
    initial_state:
      length: 29
      offset: 91
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val <T> List<T>.reversed: List<T>
        get() = reversed()
  - offset: 135
    length: 69
    placeholder_text: |-
      /*
        val list = listOf(1, 2, 3)
        list.reversed eq listOf(3, 2, 1)
      */
    initial_state:
      length: 69
      offset: 135
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val list = listOf(1, 2, 3)
        list.reversed eq listOf(3, 2, 1)
  text: |-
    // ExtensionProperties/Task2.kt
    package extensionPropertiesExercise2
    import atomictest.eq

    // TODO: implement 'reversed'

    fun main() {
    /*
      val list = listOf(1, 2, 3)
      list.reversed eq listOf(3, 2, 1)
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package extensionPropertiesExercise2

    import org.junit.Assert
    import org.junit.Test
    import util.loadFileFacade
    import util.loadToplevelPropertyGetter

    class TestExtensionPropertiesExercise2 {
      private fun <T> testProp(list: List<T>) {
        val fileFacade = loadFileFacade("extensionPropertiesExercise2")
        val property = loadToplevelPropertyGetter(fileFacade, "reversed")
        Assert.assertTrue("The 'reversed' property must be an *extension* property",
          property.parameters.size == 1)
        Assert.assertTrue("Wrong receiver for 'reversed' property: should be 'List<T>'",
          List::class.java == property.parameters.single().type)
        val actual = property.invoke(Object(), list)
        Assert.assertEquals("Wrong result for $list", list.reversed(), actual)
      }

      @Test
      fun test1() = testProp(listOf(1, 2, 3))

      @Test
      fun test2() = testProp(listOf(4, 9, 11))

      @Test
      fun test3() = testProp(listOf("ab", "cde", "z"))

      @Test
      fun test4() = testProp(('a'..'z').toList())
    }
  learner_created: false
status: Unchecked
record: -1
