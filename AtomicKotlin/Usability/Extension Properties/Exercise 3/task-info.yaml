type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 91
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 91
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Rectangle(val width: Int, val height: Int)

      val Rectangle.isSquare
        get() = width == height
  - offset: 113
    length: 127
    placeholder_text: |-
      /*
        val rectangle = Rectangle(1, 2)
        rectangle.isSquare eq false

        val square = Rectangle(3, 3)
        square.isSquare eq true
      */
    initial_state:
      length: 127
      offset: 113
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val rectangle = Rectangle(1, 2)
        rectangle.isSquare eq false

        val square = Rectangle(3, 3)
        square.isSquare eq true
  text: |-
    // ExtensionProperties/Task3.kt
    package extensionPropertiesExercise3
    import atomictest.eq

    // TODO

    fun main() {
    /*
      val rectangle = Rectangle(1, 2)
      rectangle.isSquare eq false

      val square = Rectangle(3, 3)
      square.isSquare eq true
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package extensionPropertiesExercise3

    import org.junit.Assert
    import org.junit.Test
    import util.*

    class TestExtensionPropertiesExercise3 {
      private fun testRectangle(width: Int, height: Int) {
        val rectangleClass = loadClass("extensionPropertiesExercise3", "Rectangle")
            .apply {
              assertParametersOfFirstConstructor(
                  "width" to Int::class,
                  "height" to Int::class
              )
            }
        val rectangleInstance = rectangleClass.createInstance(width, height)

        val fileFacade = loadFileFacade("extensionPropertiesExercise3")
        val property = loadToplevelPropertyGetter(fileFacade, "isSquare")

        checkPropertyIsExtension(property, rectangleClass)

        val actual = property.invoke(Object(), rectangleInstance)
        Assert.assertEquals("Wrong result for 'isSquare' for Rectangle($width, $height)",
            width == height, actual)
      }

      @Test
      fun test1() = testRectangle(1, 1)

      @Test
      fun test2() = testRectangle(2, 3)

      @Test
      fun test3() = testRectangle(-1, 3)

      @Test
      fun test4() = testRectangle(4, 4)
    }
  learner_created: false
status: Unchecked
record: -1
