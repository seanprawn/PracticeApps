type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 126
    length: 11
    placeholder_text: class Cloud
    initial_state:
      length: 11
      offset: 126
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Cloud(n: Int): Computer {
        val list: List<Node> = List(n) { Node(it) }
        override fun calculateAnswer(): Int {
          return list.sumBy { it.result }
        }
      }

      data class Node(val result: Int): Computer {
        override fun calculateAnswer() = result
      }
  - offset: 154
    length: 36
    placeholder_text: // Cloud(10).calculateAnswer() eq 45
    initial_state:
      length: 36
      offset: 154
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: Cloud(10).calculateAnswer() eq 45
  text: |-
    // Interfaces/Task1.kt
    package interfacesExercise1
    import atomictest.eq

    interface Computer {
      fun calculateAnswer(): Int
    }

    class Cloud

    fun main() {
      // Cloud(10).calculateAnswer() eq 45
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package interfacesExercise1

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.loadClass
    import kotlin.reflect.KClass
    import kotlin.reflect.typeOf
    import kotlin.test.assertEquals
    import kotlin.test.assertTrue

    @OptIn(ExperimentalStdlibApi::class)
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestInterfacesExercise1 {

        @Test
        fun `#01 cloud class structure`() {
            val actualClass = loadClass("interfacesExercise1", "Cloud")

            assertEquals(
                    expected = 1,
                    actual = actualClass.constructors.size,
                    message = "Class Cloud should have only one constructor"
            )

            actualClass.constructors.first().also { constructor ->
                assertEquals(
                        expected = listOf(typeOf<Int>()),
                        actual = constructor.parameters.map { it.type },
                        message = "Constructor of class Cloud should take only one parameter of Int type"
                )
            }

            assertTrue(
                    actual = actualClass.supertypes.contains(typeOf<Computer>()),
                    message = "Class Cloud should implement interface Computer"
            )
        }

        @Test
        fun `#02 cloud answer`() {
            val cloudClass = loadClass("interfacesExercise1", "Cloud")
            cloudClass.assertAnswer(10, 45)
            cloudClass.assertAnswer(0, 0)
        }

        private fun KClass<*>.assertAnswer(nodes: Int, answer: Int) {
            val cloud = constructors.first().call(nodes)
            assertTrue(
                    actual = cloud is Computer,
                    message = "Class Cloud should implement interface Computer"
            )
            assertEquals(
                    expected = answer,
                    actual = cloud.calculateAnswer(),
                    message = "Answer for $nodes nodes in the cloud should be $answer"
            )
        }
    }
  learner_created: false
status: Unchecked
record: -1
