type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 171
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 171
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: initOrder += "one"
  - offset: 196
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 196
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: initOrder += "two"
  - offset: 221
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 221
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: initOrder += "three"
  text: |-
    // ComplexConstructors/Exercise3.kt
    package complexConstructorsExercise3
    import atomictest.eq

    class MultipleInit {
      val initOrder = mutableListOf<String>()
      init {
        // TODO
      }
      init {
        // TODO
      }
      init {
        // TODO
      }
    }

    fun main() {
      MultipleInit().initOrder eq "[one, two, three]"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package complexConstructorsExercise3

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.full.createInstance
    import kotlin.reflect.full.memberProperties
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestComplexConstructorsExercise3 {

      @Test
      fun `#01 MultipleInit class structure`() {
        loadClass("complexConstructorsExercise3", "MultipleInit")
            .apply {
                assertConstructorNumber(1)
                assertParametersOfFirstConstructor()
                loadMemberProperty(this, "initOrder")
            }
      }

      @Test
      fun `#02 MultipleInit initialisation block`() {
        val multipleInitClass = loadClass("complexConstructorsExercise3", "MultipleInit")
        val multipleInitInstance = multipleInitClass.createInstance()
        assertEquals(
            expected = listOf("one", "two", "three"),
            actual = multipleInitClass.memberProperties.firstOrNull { it.name == "initOrder" }?.call(multipleInitInstance),
            message = "MultipleInit member property 'initOrder' should be equal to '[one, two, three]' after initialisation"
        )
      }
    }
  learner_created: false
status: Unchecked
record: -1
