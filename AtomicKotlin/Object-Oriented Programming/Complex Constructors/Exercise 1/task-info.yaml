type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 95
    length: 19
    placeholder_text: // TODO class Alien
    initial_state:
      length: 19
      offset: 95
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Alien(name: String) {
        val myName: String
        init {
          myName = name
        }
      }
  - offset: 129
    length: 74
    placeholder_text: |-
      /*
        val alien = Alien("Pencilvester")
        alien.myName eq "Pencilvester"
      */
    initial_state:
      length: 74
      offset: 129
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val alien = Alien("Pencilvester")
        alien.myName eq "Pencilvester"
  text: |-
    // ComplexConstructors/Exercise1.kt
    package complexConstructorsExercise1
    import atomictest.eq

    // TODO class Alien

    fun main() {
    /*
      val alien = Alien("Pencilvester")
      alien.myName eq "Pencilvester"
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package complexConstructorsExercise1

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.full.memberProperties
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestComplexConstructorsExercise1 {

        @Test
        fun `#01 Alien class structure`() {
            loadClass("complexConstructorsExercise1", "Alien").apply {
                assertConstructorNumber(1)
                assertParametersOfFirstConstructor(
                    "name" to String::class
                )
                assertMemberProperty( "myName", String::class)
                assertNoMemberProperty("name")
            }
        }

        @Test
        fun `#02 Alien initialisation block`() {
            val alienClass = loadClass("complexConstructorsExercise1", "Alien")
            val alienInstance = alienClass.constructors.first().call("Pencilvester")
            assertEquals(
                    expected = "Pencilvester",
                    actual = alienClass.memberProperties.firstOrNull { it.name == "myName" }?.call(alienInstance),
                    message = "Alien member property 'myName' should be equal to 'Pencilvester'"
            )

        }
    }
  learner_created: false
status: Unchecked
record: -1
