type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 464
    length: 18
    placeholder_text: class PlaceSetting
    initial_state:
      length: 18
      offset: 464
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class PlaceSetting : Custom() {
        val spoon = Spoon()
        val fork = Fork()
        val knife = Knife()
        val plate = DinnerPlate()
        init {
          trace("PlaceSetting")
        }
      }
  text: |-
    // BaseClassInit/Task2.kt
    package baseClassInitializationExercise2
    import atomictest.trace

    open class Plate(description: String) {
      init {
        trace("Plate-$description")
      }
    }

    class DinnerPlate : Plate("DinnerPlate")

    open class Utensil(description: String) {
      init {
        trace("Utensil-$description")
      }
    }

    class Spoon : Utensil("Spoon")

    class Fork : Utensil("Fork")

    class Knife : Utensil("Knife")

    open class Custom {
      init {
        trace("Custom")
      }
    }

    class PlaceSetting

    fun main() {
      PlaceSetting()
      trace eq """
        Custom
        Utensil-Spoon
        Utensil-Fork
        Utensil-Knife
        Plate-DinnerPlate
        PlaceSetting
      """
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package baseClassInitializationExercise2

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.full.createInstance
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBaseClassInitializationExercise2 : TestTrace() {

      private val packageName = "baseClassInitializationExercise2"

      @Test
      fun `#01 classes structure`() {
        loadClass(packageName, "DinnerPlate").apply {
          assertInheritance("Plate")
        }
        loadClass(packageName, "Spoon").apply {
          assertInheritance("Utensil")
        }
        loadClass(packageName, "Fork").apply {
          assertInheritance("Utensil")
        }
        loadClass(packageName, "Knife").apply {
          assertInheritance("Utensil")
        }
        loadClass(packageName, "PlaceSetting").apply {
          assertInheritance("Custom")
        }
      }

      @Test
      fun `#02 initialisation`() {
        loadClass(packageName, "PlaceSetting").createInstance()
        assertEquals(
            message = "Incorrect result of PlaceSetting initialisation",
            actual = loadTraceContent(),
            expected = listOf(
                "Custom",
                "Utensil-Spoon",
                "Utensil-Fork",
                "Utensil-Knife",
                "Plate-DinnerPlate",
                "PlaceSetting"
            )
        )
      }
    }
  learner_created: false
status: Unchecked
record: -1
