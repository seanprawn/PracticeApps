type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 285
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 285
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Checkers private constructor() : BoardGame {
        private var moves = 0
        override fun move(): Boolean {
          trace("Checkers move $moves")
          return ++moves != max
        }
        companion object Factory : GameFactory {
          private const val max = 3
          init {
            BoardGame.createBoard()
          }
          override fun create() = Checkers()
        }
      }

      class Chess private constructor() : BoardGame {
        private var moves = 0
        override fun move(): Boolean {
          trace("Chess move $moves")
          return ++moves != max
        }
        companion object Factory : GameFactory {
          private const val max = 4
          init {
            BoardGame.createBoard()
          }
          override fun create() = Chess()
        }
      }
  - offset: 399
    length: 247
    placeholder_text: |-
      /*
        playGame(Checkers.Factory)
        playGame(Chess.Factory)
        trace eq """
        BoardGame.createBoard()
        Checkers move 0
        Checkers move 1
        Checkers move 2
        BoardGame.createBoard()
        Chess move 0
        Chess move 1
        Chess move 2
        Chess move 3
        """
      */
    initial_state:
      length: 247
      offset: 399
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        playGame(Checkers.Factory)
        playGame(Chess.Factory)
        trace eq """
          BoardGame.createBoard()
          Checkers move 0
          Checkers move 1
          Checkers move 2
          BoardGame.createBoard()
          Chess move 0
          Chess move 1
          Chess move 2
          Chess move 3
        """
  text: |-
    // CompanionObjects/CompanionEx2.kt
    package companionObjectsExercise2
    import atomictest.*

    interface BoardGame {
      fun move(): Boolean
      companion object {
        fun createBoard() {
          trace("BoardGame.createBoard()")
        }
      }
    }

    interface GameFactory {
      fun create(): BoardGame
    }

    // TODO

    fun playGame(factory: GameFactory) {
      val s = factory.create()
      while (s.move())
        ;
    }

    fun main() {
    /*
      playGame(Checkers.Factory)
      playGame(Chess.Factory)
      trace eq """
      BoardGame.createBoard()
      Checkers move 0
      Checkers move 1
      Checkers move 2
      BoardGame.createBoard()
      Chess move 0
      Chess move 1
      Chess move 2
      Chess move 3
      """
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package companionObjectsExercise2

    import org.junit.Test
    import util.unimplementedTest

    class TestCompanionObjectsExercise2 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
