type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 82
    length: 39
    placeholder_text: // import nestedClassesExercise4.Seat.*
    initial_state:
      length: 39
      offset: 82
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: import nestedClassesExercise4.Seat.*
  - offset: 123
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 123
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      abstract class Seat {
        abstract fun upgrade(): Seat
        abstract fun meal(): String
        override fun toString() =
          "${this::class.simpleName}"
        class Coach : Seat() {
          override fun upgrade() = Premium()
          override fun meal() = "Bag Meal"
        }
        class Premium : Seat() {
          override fun upgrade() = Business()
          override fun meal() = "Bag Meal + Cookie"
        }
        class Business : Seat() {
          override fun upgrade() = First()
          override fun meal() = "Hot Meal"
        }
        class First : Seat() {
          override fun upgrade() = First()
          override fun meal() = "Private Chef"
        }
      }

      class Ticket(
        private var seat: Seat = Coach()
      ) {
        fun upgrade(): Seat {
          seat = seat.upgrade()
          return seat
        }
        fun meal() = seat.meal()
        override fun toString() = "$seat"
      }

      fun main() {
        val tickets = listOf(
          Ticket(),
          Ticket(Premium()),
          Ticket(Business()),
          Ticket(First())
        )
        tickets.map(Ticket::meal) eq
          "[Bag Meal, Bag Meal + Cookie, " +
          "Hot Meal, Private Chef]"
        tickets.map(Ticket::upgrade) eq
          "[Premium, Business, First, First]"
        tickets eq
          "[Premium, Business, First, First]"
        tickets.map(Ticket::meal) eq
          "[Bag Meal + Cookie, Hot Meal, " +
          "Private Chef, Private Chef]"
      }
  text: |-
    // NestedClasses/NestedEx4.kt
    package nestedClassesExercise4
    import atomictest.eq
    // import nestedClassesExercise4.Seat.*

    // TODO
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package nestedClassesExercise4

    import org.junit.Test
    import util.unimplementedTest

    class TestNestedClassesExercise4 {
        @Test fun testSolution() {
            unimplementedTest()
        }
    }
  learner_created: false
status: Unchecked
record: -1
