type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 76
    length: 22
    placeholder_text: abstract class Movable
    initial_state:
      length: 22
      offset: 76
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: interface Movable
  - offset: 126
    length: 24
    placeholder_text: abstract class Sleepable
    initial_state:
      length: 24
      offset: 126
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: interface Sleepable
  - offset: 182
    length: 37
    placeholder_text: '// class Sofa: Movable(), Sleepable()'
    initial_state:
      length: 37
      offset: 182
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'class Sofa: Movable, Sleepable'
  - offset: 234
    length: 77
    placeholder_text: |-
      /*
        val sofa = Sofa()
        sofa.move() eq "move"
        sofa.sleepOn() eq "sleep"
      */
    initial_state:
      length: 77
      offset: 234
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val sofa = Sofa()
        sofa.move() eq "move"
        sofa.sleepOn() eq "sleep"
  text: |-
    // Abstract/Task2.kt
    package abstractClassesExercise2
    import atomictest.eq

    abstract class Movable {
      fun move() = "move"
    }

    abstract class Sleepable {
      fun sleepOn() = "sleep"
    }

    // class Sofa: Movable(), Sleepable()

    fun main() {
    /*
      val sofa = Sofa()
      sofa.move() eq "move"
      sofa.sleepOn() eq "sleep"
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package abstractClassesExercise2

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.KClass
    import kotlin.reflect.full.createInstance
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestAbstractClassesExercise2 {

        private val packageName = "abstractClassesExercise2"

        private fun loadClass(className: String): KClass<*> = loadClass(packageName, className)

        @Test
        fun `#01 classes structure`() {
            loadClass("Movable").apply {
                assertInterface()
                assertDeclaredMemberFunction("move")
            }
            loadClass("Sleepable").apply {
                assertInterface()
                assertDeclaredMemberFunction("sleepOn")
            }
            loadClass("Sofa").apply {
                assertNoDeclaredMemberFunction("move")
                assertNoDeclaredMemberFunction("sleepOn")
                assertInheritance("Movable", "Sleepable")
            }
        }

        @Test
        fun `#02 sofa operations`() {
            loadClass("Sofa").apply {
                val sofa = createInstance()
                assertEquals(
                    message = "Incorrect result of sofa.move() call",
                    actual = assertMemberFunction("move").call(sofa),
                    expected = "move"
                )
                assertEquals(
                    message = "Incorrect result of sofa.sleepOn() call",
                    actual = assertMemberFunction("sleepOn").call(sofa),
                    expected = "sleep"
                )
            }
        }
    }
  learner_created: false
status: Unchecked
record: -1
