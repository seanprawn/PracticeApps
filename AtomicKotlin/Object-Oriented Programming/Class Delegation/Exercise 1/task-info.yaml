type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 129
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 129
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'fun resize(scale: Int): Int'
  - offset: 282
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 282
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'override fun resize(scale: Int) = scale'
  - offset: 371
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 371
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: 'fun rightClicked(): Boolean'
  - offset: 482
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 482
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: override fun rightClicked() = true
  - offset: 841
    length: 7
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 841
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      button.resize(10) eq 10
        button.rightClicked() eq true
  text: |-
    // ClassDelegation/Task1.kt
    package classDelegationExercise1
    import atomictest.eq

    interface Rectangle {
      fun paint(): String
      // TODO
    }

    class ButtonImage(
      val width: Int,
      val height: Int
    ) : Rectangle {
      override fun paint() =
        "painting ButtonImage($width, $height)"
      // TODO
    }

    interface MouseManager {
      fun clicked(): Boolean
      fun hovering(): Boolean
      // TODO
    }

    class UserInput : MouseManager {
      override fun clicked() = true
      override fun hovering() = true
      // TODO
    }

    class Button(
      val width: Int,
      val height: Int,
      val image: Rectangle =
        ButtonImage(width, height),
      val input: MouseManager = UserInput()
    ) : Rectangle by image, MouseManager by input

    fun main() {
      val button = Button(10, 5)
      button.paint() eq
        "painting ButtonImage(10, 5)"
      button.clicked() eq true
      button.hovering() eq true
      // TODO
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package classDelegationExercise1

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.KClass
    import kotlin.reflect.full.createInstance
    import kotlin.test.assertEquals

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestClassDelegationExercise1 {

      private val packageName = "classDelegationExercise1"

      private fun loadClass(className: String): KClass<*> = loadClass(packageName, className)

      @Test
      fun `#01 classes structure`() {
        val rectangleClass = loadClass("Rectangle").apply {
          assertInterface()
          assertNoInheritance()
          assertDeclaredMemberFunction("paint")
          assertDeclaredMemberFunction("resize")
        }
        loadClass("ButtonImage").apply {
          assertInheritance("Rectangle")
          assertDeclaredMemberProperty("width")
          assertDeclaredMemberProperty("height")
          assertDeclaredMemberFunction("paint")
          assertDeclaredMemberFunction("resize")
        }
        val mouseManagerClass = loadClass("MouseManager").apply {
          assertInterface()
          assertNoInheritance()
          assertDeclaredMemberFunction("clicked")
          assertDeclaredMemberFunction("hovering")
          assertDeclaredMemberFunction("rightClicked")
        }
        loadClass("UserInput").apply {
          assertInheritance("MouseManager")
          assertDeclaredMemberFunction("clicked")
          assertDeclaredMemberFunction("hovering")
          assertDeclaredMemberFunction("rightClicked")
        }

        loadClass("Button").apply {
          assertInheritance("Rectangle", "MouseManager")
          assertConstructorNumber(1)
          assertParametersOfFirstConstructor(
              "width" to Int::class,
              "height" to Int::class,
              "image" to rectangleClass,
              "input" to mouseManagerClass
          )
          assertDeclaredMemberProperty("width")
          assertDeclaredMemberProperty("height")
          assertDeclaredMemberProperty("image")
          assertDeclaredMemberProperty("input")
        }
      }

      @Test
      fun `#02 button functioning`() {
        val buttonImageClass = loadClass("ButtonImage")
        val userInputClass = loadClass("UserInput")
        loadClass("Button").apply {
          val button = createInstance(
              10,
              5,
              buttonImageClass.createInstance(10, 5),
              userInputClass.createInstance()
          )
          assertEquals("painting ButtonImage(10, 5)", assertMemberFunction("paint").call(button))
          assertEquals(true, assertMemberFunction("clicked").call(button))
          assertEquals(true, assertMemberFunction("hovering").call(button))
          assertEquals(10, assertMemberFunction("resize").call(button, 10))
          assertEquals(true, assertMemberFunction("rightClicked").call(button))
        }
      }
    }
  learner_created: false
status: Unchecked
record: -1
