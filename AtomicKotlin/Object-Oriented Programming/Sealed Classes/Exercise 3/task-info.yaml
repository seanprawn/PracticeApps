type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 111
    length: 113
    placeholder_text: |-
      sealed class Top
      class Middle1 : Top()
      class Middle2 : Top()
      open class Middle3 : Top()
      class Bottom3 : Middle3()
    initial_state:
      length: 113
      offset: 111
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      sealed class Top {
        class Middle1 : Top()
        class Middle2 : Top()
        open class Middle3 : Top()
        class Bottom3 : Middle3()
      }
  - offset: 335
    length: 33
    placeholder_text: // TODO display random subclasses
    initial_state:
      length: 33
      offset: 335
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      val rand = Random(17)
        Top::class.sealedSubclasses
          .random(rand).simpleName eq "Middle3"
  text: |-
    // SealedClasses/SealedEx3.kt
    package sealedClassesExercise3
    import atomictest.eq
    import kotlin.random.Random

    sealed class Top
    class Middle1 : Top()
    class Middle2 : Top()
    open class Middle3 : Top()
    class Bottom3 : Middle3()

    fun main() {
      Top::class.sealedSubclasses
        .map { it.simpleName } eq
        "[Middle1, Middle2, Middle3]"
      // TODO display random subclasses
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package sealedClassesExercise3

    import org.junit.Test
    import util.loadClass
    import kotlin.random.Random
    import kotlin.reflect.full.superclasses
    import kotlin.test.assertEquals
    import kotlin.test.assertTrue

    class TestSealedClassesExercise3 {

        private val packageName = "sealedClassesExercise3"

        @Test
        fun `#01 classes structure`() {
            loadClass(packageName, "Top").also { top ->
                assertTrue(
                        message = "Class ${top.simpleName} is not sealed",
                        actual = top.isSealed
                )
                assertEquals(
                        message = "Should implement three sealed subclasses",
                        expected = listOf("Middle1", "Middle2", "Middle3"),
                        actual = top.sealedSubclasses.map { it.simpleName!! }.sorted()

                )
                top.sealedSubclasses
                        .first { it.simpleName == "Middle3" }
                        .also { middle3 ->
                            assertTrue(
                                    message = "Class ${middle3.simpleName} is expected to be open",
                                    actual = middle3.isOpen
                            )
                            val sealedSubclassesNames = top.sealedSubclasses.map { it.simpleName!! }
                            top.nestedClasses
                                    .first { !sealedSubclassesNames.contains(it.simpleName!!) }
                                    .also { bottom ->
                                        assertTrue(
                                                message = "Class ${middle3.simpleName} is expected to have at least one derived class",
                                                actual = bottom.superclasses.contains(middle3)
                                        )
                                    }
                        }
            }
        }
    }
  learner_created: false
status: Unchecked
record: -1
