type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 113
    length: 18
    placeholder_text: class Disinfectant
    initial_state:
      length: 18
      offset: 113
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      class Disinfectant: Detergent() {
        fun sterilize() {
          ops += "sterilize"
        }
      }
  - offset: 146
    length: 212
    placeholder_text: |-
      /*
        val disinfectant = Disinfectant()
        disinfectant.dilute()
        disinfectant.apply()
        disinfectant.scrub()
        disinfectant.sterilize()
        disinfectant.ops eq
          listOf("dilute", "apply", "scrub", "sterilize")
      */
    initial_state:
      length: 212
      offset: 146
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        val disinfectant = Disinfectant()
        disinfectant.dilute()
        disinfectant.apply()
        disinfectant.scrub()
        disinfectant.sterilize()
        disinfectant.ops eq
          listOf("dilute", "apply", "scrub", "sterilize")
  text: |-
    // Inheritance/Task2.kt
    package inheritanceExercise2
    import inheritanceExercise1.Detergent
    import atomictest.eq

    class Disinfectant

    fun main() {
    /*
      val disinfectant = Disinfectant()
      disinfectant.dilute()
      disinfectant.apply()
      disinfectant.scrub()
      disinfectant.sterilize()
      disinfectant.ops eq
        listOf("dilute", "apply", "scrub", "sterilize")
    */
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package inheritanceExercise2

    import inheritanceExercise1.Cleanser
    import inheritanceExercise1.Detergent
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.test.assertEquals


    @OptIn(ExperimentalStdlibApi::class)
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestInheritanceExercise2 {

        @Test
        fun `#01 classes structure`() {
            val cleanserClass = Cleanser::class
            cleanserClass.assertConstructorNumber(1)
            val optProperty = loadMemberProperty(cleanserClass, "ops")
            assertEquals(
                    actual = optProperty.returnType.toString(),
                    expected = "kotlin.collections.MutableList<kotlin.String>",
                    message = "Invalid return type of the method"
            )
            loadMemberFunction(cleanserClass, "dilute")
            loadMemberFunction(cleanserClass, "apply")
            loadMemberFunction(cleanserClass, "scrub")
            cleanserClass.assertNoMemberFunction("sterilize")

            val detergentClass = Detergent::class
            detergentClass.assertNoMemberFunction("sterilize")

            val disinfectantClass = Disinfectant::class
            disinfectantClass.assertInheritance(detergentClass)
            loadMemberFunction(disinfectantClass, "sterilize")
        }

        @Test
        fun `#02 disinfectant methods application`() {
            val disinfectantClass = Disinfectant::class
            val instance = disinfectantClass.constructors.first().call()
            loadMemberFunction(disinfectantClass, "dilute").call(instance)
            loadMemberFunction(disinfectantClass, "apply").call(instance)
            loadMemberFunction(disinfectantClass, "scrub").call(instance)
            loadMemberFunction(disinfectantClass, "sterilize").call(instance)

            loadMemberProperty(disinfectantClass, "ops")
                    .call(instance)
                    .also { opt ->
                        assertEquals(
                                expected = listOf("dilute", "apply", "scrub", "sterilize"),
                                actual = opt as List<String>,
                                message = "Member property `opt` of class Disinfectant should contain list of methods " +
                                        "names after their invocation"
                        )
                    }

        }
    }
  learner_created: false
status: Unchecked
record: -1
