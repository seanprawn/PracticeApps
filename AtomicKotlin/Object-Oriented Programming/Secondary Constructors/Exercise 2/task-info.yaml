type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 138
    length: 33
    placeholder_text: // TODO add secondary constructor
    initial_state:
      length: 33
      offset: 138
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      constructor(shipClass: String, model: Int)
          : this("$shipClass-$model")
  - offset: 266
    length: 74
    placeholder_text: |-
      //    SpaceShip("MClass", 29321) eq
      //      "SpaceShip(name=MClass-29321)"
    initial_state:
      length: 74
      offset: 266
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |2-
        SpaceShip("MClass", 29321) eq
          "SpaceShip(name=MClass-29321)"
  text: |-
    // SecondaryConstructors/Task2.kt
    package secondaryConstructorsExercise2
    import atomictest.eq

    data class SpaceShip(val name: String) {
      // TODO add secondary constructor
    }

    fun main() {
      SpaceShip("SuperHighSpeedShip") eq
        "SpaceShip(name=SuperHighSpeedShip)"
    //    SpaceShip("MClass", 29321) eq
    //      "SpaceShip(name=MClass-29321)"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package secondaryConstructorsExercise2

    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import util.*
    import kotlin.reflect.KClass
    import kotlin.reflect.KFunction
    import kotlin.test.assertEquals
    import kotlin.test.assertTrue

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSecondaryConstructorsExercise2 {

      @Test
      fun `#01 constructors structure`() {
        val actualClass = loadClass("secondaryConstructorsExercise2", SpaceShip::class.simpleName!!).apply {
          assertConstructorNumber(2)
          assertMemberProperty( "name", String::class)
        }

        actualClass
            .findConstructorBySignatureSize(1)
            .also { actualConstructor ->
              actualClass.assertParametersOfConstructor(actualConstructor,
                  "name" to String::class
              )
            }

        actualClass
            .findConstructorBySignatureSize(2)
            .also { actualConstructor ->
              actualClass.assertParametersOfConstructor(actualConstructor,
                  "shipClass" to String::class,
                  "model" to Int::class
              )
            }
      }

      @Test
      fun `#02 apply constructors`() {
        val actualClass = loadClass("secondaryConstructorsExercise2", SpaceShip::class.simpleName!!)
        val nameProp = actualClass.assertMemberProperty("name", String::class)

        val spaceShip1 = actualClass.findConstructorBySignatureSize(1).call("SuperhighspeedShip")
        assertEquals(
            expected = "SuperhighspeedShip",
            actual = nameProp.getter.call(spaceShip1),
            message = "SpaceShip constructed as SpaceShip(\"SuperhighspeedShip\") should have a name 'SuperhighspeedShip'"
        )
        val spaceShip2 = actualClass.findConstructorBySignatureSize(2).call("MClass", 29321)
        assertEquals(
            expected = "MClass-29321",
            actual = nameProp.getter.call(spaceShip2),
            message = "SpaceShip constructed as SpaceShip(\"MClass\", 29321) should have a name 'MClass-29321'"
        )
      }

      private fun KClass<*>.findConstructorBySignatureSize(paramNumber: Int): KFunction<Any> {
        return constructors
            .firstOrNull { it.parameters.size == paramNumber }
            ?: throw AssertionError("Class $simpleName has no constructor with $paramNumber parameters")
      }
    }
  learner_created: false
status: Unchecked
record: -1
