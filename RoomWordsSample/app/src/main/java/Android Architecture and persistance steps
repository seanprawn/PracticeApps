TODO List - in order to implement the architecture

1 . Create an Entity
     -> Create the class for the entity
    -> Annotate the class so that Room can create the database from it

2. Create and Implement the DAO class
 ***************************
 !!!  This will be an annotated class where you specify SQL queries and associate them with method calls.
 !!!  The compiler checks the SQL for errors, then generates queries from the annotations.
 !!!  For common queries, the libraries provide convenience annotations (such as @Insert.)
 ****************************
 - Note that:
   -The DAO must be an interface or abstract class.
   -Room uses the DAO to create a clean API for your code.
   -By default, all queries (@Query) must be executed on a thread other than the main thread.
   -For operations such as inserting or deleting, if you use the provided convenience annotations, Room takes care of thread management for you.

    -> Implement the DAO class

3. Implement LiveData
 - observe the data so that when it changes, you can react.
 - LiveData is a LifeCycle Library class for observation and helps the app respond to data changes.
 - If you use a return value of type LiveData in your method description, Room generates all necessary code to update the LiveData when the database is updated.

    -> Implement by Annotating the DAO class and using LiveData

4. Add a Room Database
 - Room is a database layer on top of an SQLite database.
 - Room takes care of mundane tasks that you used to handle with a database helper class such as SQLiteOpenHelper.
 - Room uses the DAO to issue queries to its database.
 - By default, to avoid poor UI performance, Room doesn't allow you to issue database queries on the main thread. LiveData applies this rule by automatically running the query asynchronously on a background thread, when needed.
 - Room provides compile-time checks of SQLite statements.

  **********************************************************
 - !!!! Your Room class must be abstract and extend RoomDatabase.
  ***********************************************************
 - Usually, you only need one instance of the Room database for the whole app.

    -> Implement the Room Database Class
    -> Add annotations for the database
    -> use synchronized
    -> Setup migration or use singleton and destroy the db and rebuild

 5. Create the repository
  - a class that abstracts access to multiple data sources.
  - The Repository is not part of the Architecture Components libraries, but is a suggested best practice for code separation and architecture.
  - A Repository class handles data operations. It provides a clean API to the rest of the app for app data.
  - It manages query threads and allows you to use multiple backends.
  - In the most common example, the Repository implements the logic for deciding whether to fetch data from a network or use results cached in the local database.

    -> Implement the repository class
    -> Add wrapper methods and create an async task

6. Create the ViewModel
 - The ViewModel is a class whose role is to provide data to the UI and survive configuration changes.
 - A ViewModel acts as a communication center between the Repository and the UI.
 - The ViewModel is part of the lifecycle library.
 - holds your app's UI data in a way that survives configuration changes.
 - Separating your app's UI data from your Activity and Fragment classes lets you better follow the single responsibility principle:
     ****Your activities and fragments are responsible for drawing data to the screen, while your ViewModel is responsible for holding and processing all the data needed for the UI.
 - In the ViewModel, use LiveData for changeable data that the UI will use or display.
 - ***********************************************************************************************************************
 !!!!  Never pass context into ViewModel instances.
 !!!!  Do not store Activity, Fragment, or View instances or their Context in the ViewModel.
  - ***********************************************************************************************************************
 - An Activity can be destroyed and created many times during the lifecycle of a ViewModel,
 - such as when the device is rotated. If you store a reference to the Activity in the ViewModel,
 - you end up with references that point to the destroyed Activity.
 - This is a memory leak. If you need the application context, use AndroidViewModel

    -> Implement the ViewModel class

7. Add XML Layouts for the UI

    -> Add styles that follow material design principles
    -> Add Item Layout
    -> Add a recyclerView
    ****************************************************************************************************************
    -> To use VectorDrawableCompat, you need to set android.defaultConfig.vectorDrawables.useSupportLibrary = true in app\build.gradle
    ****************************************************************************************************************
TODO
Task 9.1 of Android fundamentals 10.1 Part A: Room, LiveData, and ViewModel
 https://developer.android.com/codelabs/android-training-livedata-viewmodel?index=..%2F..%2Fandroid-training#

8. Create an adapter and add the recyclerview
 - The adapter caches data and populates the RecyclerView with it.
 - The inner class WordViewHolder holds and manages a view for one list item.

    -> Add a class WordListAdapter that extends RecyclerView.Adapter.
    -> Add RecyclerView to MainActivity

9. Populate the Database
 - the method to populate the database with the initial set of words
 - Every time the database is opened, all content is deleted and repopulated.
 - This is a reasonable solution for a sample app, where you usually want to restart on a clean slate.
 - To delete all content and repopulate the database whenever the app is started, you create a RoomDatabase.
 - Callback and override the onOpen() method.
 - Because you cannot do Room database operations on the UI thread, onOpen() creates and executes an AsyncTask to add content to the database.

    -> Create the callback for populating the db

10. Connect the UI with the data
 - To display the current contents of the database, you add an observer that observes the LiveData in the ViewModel.
 - Whenever the data changes (including when it is initialized), the onChanged() callback is invoked.
 - In this case, the onChanged() callback calls the adapter's setWord() method to update the adapter's cached data and refresh the displayed list.
 - Use ViewModelProviders to associate your ViewModel with your UI controller.
 - When your app first starts, the ViewModelProviders class creates the ViewModel.
 - When the activity is destroyed, for example through a configuration change, the ViewModel persists.
 - When the activity is re-created, the ViewModelProviders return the existing ViewModel.


    -> Display the words

11. Create an activity for adding words
 -


    -> Add String resources
    -> Add a style for buttons
    -> Create the new activity
    -> Implement the new activity class
    -> Add code to insert a word into the db


********************************************************************************************************************************************

********************************************************************************************************************************************
Now that you have a working app, let's recap what you've built. Here is the app structure again, from the beginning:

You have an app that displays words in a list (MainActivity, RecyclerView, WordListAdapter).
You can add words to the list (NewWordActivity).
A word is an instance of the Word entity class.
The words are cached in the RecyclerViewAdapter as a List of words (mWords). The list is automatically updated and redisplayed when the data changes.
The automatic update happens because in the MainActivity, there is an Observer that observes the words and is notified when the words change. When there is a change, the observer's onChange() method is executed and updates mWords in the WordListAdapter.
The data can be observed because it is LiveData. And what is observed is the LiveData<List<Word>> that is returned by the WordViewModel object.
The WordViewModel hides everything about the backend from the user interface. It provides methods for accessing the UI data, and it returns LiveData so that MainActivity can set up the observer relationship. Views, activities, and fragments only interact with the data through the ViewModel. As such, it doesn't matter where the data comes from.
In this case, the data comes from a Repository. The ViewModel does not need to know what that Repository interacts with. It just needs to know how to interact with the Repository, which is through the methods exposed by the Repository.
The Repository manages one or more data sources. In the RoomWordsSample app, that backend is a Room database. Room is a wrapper around and implements an SQLite database. Room does a lot of work for you that you used to have to do yourself. For example, Room does everything that you used to use an SQLiteOpenHelper class to do.
The DAO maps method calls to database queries, so that when the Repository calls a method such as getAllWords(), Room can execute SELECT * from word_table ORDER BY word ASC**.**
The result returned from the query is observed LiveData. Therefore, every time the data in Room changes, the Observer interface's onChanged() method is executed and the UI is updated.

********************************************************************************************************************************************
********************************************************************************************************************************************

12. update the app so that when it opens, the initial data set is only added if the database has no data.

 - To detect whether the database contains data already, you can run a query to get one data item. If the query returns nothing, then the database is empty.
    -> Add a method to the DAO to get a single word
    -> Update the initialization method to check whether data exists

13. delete all words
 -

    -> Add DeleteAll() to DAO interface and annotate it

    -> Add DeleteAll() to the repository class
    -> Add DeleteAll() to ViewModel class
    -> Add the clear all menu option

14. Delete 1 word only
 -  here are the general steps to implement a method to use the Room library to interact with the database:
 - Add the method to the DAO, and annotate it with the relevant database operation.
 - Add the method to the WordRepository class. Write the code to run the method in the background.
 - To call the method in the WordRepository class, add the method to the WordViewModel.
 -*** The rest of the app can then access the method through the WordViewModel.

    -> Add DeleteWord() to DAO and annotate it
    -> Add deleteWord() to the WordRepository class
    -> Add deleteWord() to the WordViewModel class

15. Enable users to swipe words away
 - add functionality to allow users to swipe an item in the RecyclerView to delete it.
 - Use the ItemTouchHelper class provided by the Android Support Library (version 7 and higher) to implement swipe functionality in your RecyclerView.
 ***- The ItemTouchHelper class has the following methods:
   * onMove() is called when the user moves the item. You will not implement any move functionality in this app.
   * onSwipe() is called when the user swipes the item. You implement this method to delete the word that was swiped.

    -> Enable the adapter to detect a swiped word
    -> Add a method in the adapter
    -> Add code in the onCreate() method of MainActivity to implement the onTouchHelper class to swipe and delete single items

    ********************************************************
    ********************************************************
    Things to notice in the code:

    onSwiped() gets the position of the ViewHolder that was swiped:


    int position = viewHolder.getAdapterPosition();
    Given the position, you can get the word displayed by the ViewHolder by calling the getWordAtPosition() method that you defined in the adapter:


    Word myWord = adapter.getWordAtPosition(position);
    Delete the word by calling deleteWord() on the WordViewModel:


    mWordViewModel.deleteWord(myWord);
    ****************************************************************************************